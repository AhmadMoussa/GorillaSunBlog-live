

[
  
  
    
    
      {
        "title": "Sketch from Scratch 1 Colorful checkerboard in P5JS",
        "excerpt": "Why you need a visual medium alongside your music\n\nTwitter and Instagram are primarily visual mediums and are not extremely well suited for sharing audio content. Digital artists, designers and models can get a lot of traction from posting beautiful pictures or videos, especially since it would be something that other people would want to re-tweet or share in their stories. As a musician or producer, screen recordings of your DAW playing back your track is usually not extremely aesthetically pleasing. Personally, it's been extremely difficult to find something visually interesting and also thematically appropriate to use as cover art for your social media post.\n\n",
        "content": "Why you need a visual medium alongside your music\n\nTwitter and Instagram are primarily visual mediums and are not extremely well suited for sharing audio content. Digital artists, designers and models can get a lot of traction from posting beautiful pictures or videos, especially since it would be something that other people would want to re-tweet or share in their stories. As a musician or producer, screen recordings of your DAW playing back your track is usually not extremely aesthetically pleasing. Personally, it's been extremely difficult to find something visually interesting and also thematically appropriate to use as cover art for your social media post.\n\nKeeping it original\nAnother restriction that I restrained myself with was that everything that I post had to be completely original, which naturally includes the cover art. This led me to experiment with different programming languages and tools that could technically be used for creating these visuals. I've seen a lot of posts that use touchdesigner to create visuals for their music and it's quite fantastic in that regard. Touchdesigner is a python powered node based visual programming language that's seeing a lot of use by DJs and visual performers, however I found it too difficult to use for my purposes, as I wanted something quick and simple. I also experimented with OpenGL and GLSL, all the time while reminiscing about the computer graphics class that I've taken a few years ago. But shading languages are also way overkill for simple visuals. I also attempted to use OpenFramenworks, a creative coding library in c++ and built on top of OpenGL, but I found it equivalently too difficult.\n\nP5JS\nWhat's P5JS?\nHowever recently I discovered P5JS, another creative coding library built with Javascript. What I found most exciting about it was that it had online editor where you could code up sketches very quickly and run them directly in your browser. No hassle with any downloads or installation, no dealing with a compiler on system, and tons of tutorials and sketches from other people that you can simply view and get inspired by.\n\nHow does P5JS work?\nComprehensive and exhaustive tutorials on P5JS can be found on The Coding Train's Youtube channel, and the complete P5JS can be found on the official website. Quick sketches can be spun up in the web editor.\nAn empty sketch starts with two functions. Setup and Draw. The setup functions contains the canvas() statement that creates the (surprise!) canvas and should usually contain everything that you want to do before drawing to the canvas. When you hit the run button in the top left corner of the web editor, the setup function is executed, and then immediately after, the draw function is called. The draw function will then continuously execute it's contents, and depending on what that is, will make something appear on screen.\n\n         View this post on Instagram            A post shared by Ahmad Moussa (@gorilla.sun)\n\n\nIn the embedded instagram post above you can see the final product. The warbly music that's playing alongside the animation will be the topic for another blog post.\n\nCreating the checkerboard\n\n\nThe Colors\n\nThe first thing we'll want to do is grab a bunch of harmonious colors from Coolors, which conveniently lets us export the hex codes. We can later on randomly draw colors from this array to color the squares in our grid:\n\nvar listOfColors = [\"#1c77c3\", \"#39a9db\", \"#40bcd8\", \"#f39237\", \"#d63230\",\n                                \"#540d6e\", \"#ee4266\", \"#ffd23f\", \"#f3fcf0\", \"#1f271b\"];\n\nThis array is in the global scope and therefore accesible everywhere throughout the rest of the code.\nThe Square\n\nNext we create a template square class which we can reuse to create each individual square in our grid. For now the square will contain it's position, it's size and it's color:\n\nclass Square{\n  constructor(px,py,s){\n    this.positionX = px\n    this.positionY = py\n    this.size = s\n    this.c = listOfColors[int(random(0, listOfColors.length))]\n  }\n\n  display(){\n    fill(this.c)\n    rect(this.positionX-this.size/2, this.positionY-this.size/2, this.size, this.size)\n  }\n}\n\n\nThe move function will be empty for now, as the individual squares do not have any moving behaviour. Experiment with it though, maybe you can come up with something interesting!\n\nThe Grid\n\nNext we create an object that creates, arranges and shows the individual squares in our grid. The tricky part about it is calculating the space between all the squares as well as their respective widths, such that the grid is always centered:\n\nclass SquareGrid{\n  constructor(){\n    this.squares = []\n    this.gridSize = 8\n    this.squareSize = 13\n    this.spacing = 16\n    this.positionX = width/2 - ((this.gridSize-1) * (this.spacing))/2\n    console.log(this.positionX)\n    this.positionY = height/2 - ((this.gridSize-1) * (this.spacing))/2\n\n    for(let i=0; i&ltthis.gridSize; i++){\n      let row = []\n      for(let j=0; j&ltthis.gridSize; j++){\n        row.push(\n          new Square((this.positionX + this.spacing * i),(this.positionY + this.spacing * j ),this.squareSize)\n        )\n      }\n      this.squares.push(row)\n    }\n  }\n\n  display(){\n    for(let i=0; i&ltthis.gridSize; i++){\n      for(let j=0; j&ltthis.gridSize; j++){\n        this.squares[i][j].display()\n      }\n    }\n    this.squares[int(random(this.gridSize))][int(random(this.gridSize))].c = listOfColors[int(random(0, listOfColors.length))]\n  }\n}\n\n\nThe final statement at the bottom of the display function is there to make the grid appear animated. Simply after drawing the entire grid, one cell will be selected at random and it's color will be updated by a random color from the color array.\nSetup and Draw and Voila\n\nThe last thing we still need to do is instantiate the grid and we'll obtain the grid that you've already seen above.\n\nfunction setup() {\n  createCanvas(256, 256);\n  grid = new SquareGrid()\n}\n\nfunction draw() {\n  background(220);\n  grid.display()\n}\n The entire code can run in the web editor here. If there's something that's not very clear leave me a comment below. And if you enjoyed this post consider following me on Instagram or Twitter, or alternatively shoot me an email. Cheers and thanks for reading.\n",
        "url": "/blog/Sketch-from-Scratch-1-Colorful-checkerboard-in-P5JS"
      },
    
      {
        "title": "MIDI signals from Python to Ableton Live",
        "excerpt": "\n\n",
        "content": "\n\nOver two years ago, I saw Andrew Huang's video on creating music from a video of fireworks. He used a software that essentially took the pixel values of a video and converted them to midi signals that were sent to his modular synth. Since I had no modular synth (and I still don't have one), but had Ableton Live, I wanted to build somthing similar. However I had no idea how to send external triggers to Ableton or how it could receive them. I honestly didn't know where to begin with, and info on this seemed very sparse on the internet. But after a little digging I was able to piece together all the components that I needed. After that I created a github repository that guides one through the necessary steps to have a python script trigger a synth in Ableton. Which is to date my most starred github repository. It's only appropriate that I revisit it and write a more detailed blog post about it. Let's get started! \n\nRequirements\n\n\n  Obviously you need to have python installed on your pc/laptop.\n  After verifiying that you have python installed correctly on your machine, install this package via pip: !pip install python-rtmidi\n  Install this software: LoopMIDI by Tobias Erichsen\n  And naturally you'll also need Ableton Live installed on your device.\n\n\n\nSetup\nWhy do I need to install rtmidi and LoopMIDI?\nrtmidi is a python package that makes it easy to create a MIDI signal with a couple of lines of code in a python script, whereas LoopMIDI allows us to create a virtual port. Both  are essential for us to be able to send the MIDI signal to Ableton. We will configure ableton in such a way that it is going to listen to the virtual port, whereas the python script will create and send MIDI signals to that port. \n\nCreating a port with LoopMIDI\nCreating a new port with LoopMIDI is as simple as running the executable and then clicking on the small + button in the lower left corner. You'll see a new entry pop up in the list of ports. Voila, we have created a port!\n\nThe python script\nCreate an empty python file somewhere in a directory on your pc. Copy the following content into it: \n# import time and rtmidi package\nimport time\nimport rtmidi\n\n# the function call rtmidi.Midiout() creates the handler that we'll use to send midi signals\nmidiout = rtmidi.MidiOut()\n\n# check and get the ports which are open\navailable_ports = midiout.get_ports()\n\n# here we're printing the ports to check that we see the one that loopMidi created.\n# In the list we should see a port called \"loopMIDI port\".\nprint(available_ports)\n\n# Attempt to open the port\nif available_ports:\n    midiout.open_port(1)\nelse:\n    midiout.open_virtual_port(\"My virtual output\")\n\n# this is how you create a midi note, the specs are: [command, note, velocity]\nnote_on = [0x90, 60, 112]\nnote_off = [0x80, 60, 0]\nmidiout.send_message(note_on)\n\n# Here you need to insert a short delay before turning the note off to make sure that the note_on signal was received\ntime.sleep(0.5)\nmidiout.send_message(note_off)\n\ndel midiout\n\nThere's a number of things happening in this short piece of code. First we are importing the rtmidi package that we installed with pip as well as the time module from python, we'll need it in a bit. Next we invoke check which ports exist on our device at the moment of execution and print a list of them. There should be two, one default port that already exists on our system as well as the LoopMIDI port that we created.\n\nBut what are MIDI signals exactly?\nIf you got this far, great! Now we need to create the midi note that we will send to the port. MIDI signals are essntially a set of commands that can be created following certain specifications. More formally a midi command consists of a series of numbers that indicate a certain instruction that will be executed when received by a MIDI device. rtmidi allows us to create such a command simply by creating an array consisting of three values. The first being the event type, here we wrote 0x90 indicating a 'note on' event. The second value indicates the pitch of the note. MIDI notes span from 0 to 127, where a value of 60 would indicate a middle C note. And lastly, we indicate the velocity of the note, which is essentially the intensity with which we are playing the note. Analogically, velocity can be portrayed by how hard you're pressing down on a piano key. On the following line of code you can see another set of values, indicating the 'note off' event, which we will need to turn indicate that we are done playing the middle C note that we just sent over the port. Notice that here we indicate a velocity of 0.\n\nAfter creating both 'note on' and 'note off' events we can proceed to sending the notes over to the port. This is simply done by invoking the handler and using the send_message() function, where we pass the 'note on' message. If you switch to the LoopMIDI window you'll see that the value in the 'Total Data' column for the respective port will have increased, which means that the note has been received.\n\nConfiguring Ableton\n\n\nIn Ableton we'll have to do click a couple of buttons. First jump to your preferences and go to Link MIDI. In the 'MIDI ports' section you should see a entry called 'Loop MIDI' port under inputs. Click on the 'on' button under the 'track' column.\n\n\n\n\n\nAfter that create a MIDI track and make sure it has an instrument loaded. Next you'll want to arm the track, set it to auto and set the 'MIDI from' field to the 'Loop MIDI' port. Now run the script, and voila it should have trigerred the midi note.\n\n",
        "url": "/blog/A-tutorial-on-sending-MIDI-signals-from-a-python-script-to-Ableton-Live"
      },
    
      {
        "title": "How to write interesting chord progressions",
        "excerpt": "\n\n",
        "content": "\n\nThe chord progression is without a doubt the underlying driving force of your song. The way I like to think about it, is that specific chords can convey very specific types of emotions, and more specifically, it's the transition between two chords what conveys a sense of emotive movement in your composition. I am well aware that this type of blog post is probably a horse beaten far beyond the point of no return, but I'll try to offer some tips that I use when I feel like I'm stuck while writing music. Let's get started!\n\nRemember the basics\nOne thing that I've learned the hard way, is that adding complexity to your music, for the sake of adding complexity is usually not a good way to develop your composition. You don't really need incredibly complex harmony to create an interesting piece of music. You really don't need more than the simple old major scale to create good chord progressions, as a matter of fact if you're building your chords from a diatonic scale, it'll be unlikely that you end up with something that doesn't sound nice.\n\nHere are some examples of chord progressions that I personally use a lot:\n\n\n\n\n  II-V-I\n\n  \n  \nYour browser does not support the audio element.\n\n\n\n\n  IV-V-vi-I\n    \n  \nYour browser does not support the audio element.\n\n\n\n  iii-IV-V-vi\n    \n  \nYour browser does not support the audio element.\n\n\n\n\n\n\nMelody on top of your chords\n Sprinkling some notes on top of your chords can add a lot of character. Notes beyond the 3rd and 5th of a chord can add a lot flavor to your progression and make it feel like you've already composed a little composition that only needs a little more fleshing out. Here are 3 variations of melodies on top of the 3-4-5-6 chord progression we have already seen earlier:\n\n\n\n\n  Variation 1\n  \n  \nYour browser does not support the audio element.\n\n\n\n\n  Variation 2\n    \n  \nYour browser does not support the audio element.\n\n\n\n  Variation 3\n    \n  \nYour browser does not support the audio element.\n\n\n\n\n\n\nBorrowed Chords\nNext up are borrowed chords. Inserting a chord from another mode in your progression can change the entire overall mood, and has the effect of giving a surprising audible twist. Here are some examples, with the same chord progressions from the first tip, but where we replace one of them by it's major or minor equivalent.\n\n\n\n  I-III-IV-V\n  \n  \nYour browser does not support the audio element.\n\n\n\n\n  I-V-VI-III\n    \n  \nYour browser does not support the audio element.\n\n\n\n  I-IV-iv\n    \n  \nYour browser does not support the audio element.\n\n\n\n\n\nTrust your ears\nUsing my ears is maybe one of the things that I forget most often. And by using my ears I mean actively listening to the music I'm working on, and trying to imagine where it wants to go. Every chord has a tendency to go somewhere, it's somehow pulling towards a different set of notes, sometimes it's not very obvious where it wants to go though. For example a simple major chord is very comfortable and doesn't seem like it's about to go anywhere, but if you try to picture where it could go you can start hearing some options. \n\n\n  \nYour browser does not support the audio element.\n\n",
        "url": "/blog/4-ways-to-make-your-chord-progressions-more-interesting"
      },
    
      {
        "title": "Continuous oscillating motion in P5JS with Sine functions",
        "excerpt": "\n \n\nWhat's the problem with trigonometry?\nEverybody hates trigonometry\n\n\n",
        "content": "\n \n\nWhat's the problem with trigonometry?\nEverybody hates trigonometry\n\nEverybody hates trigonometry (at least at some point throughout their life), however, if you want to add specific kinds of motion, such as angular, orbiting and oscillating motions (to name a few), to your creative coding sketches, then there's no way around trigonometry. Understanding trigonometric concepts intuitively can go a long way in improving your problem solving skills. I know it did for me.\n\n The way it's taught... is problematic\n\nI remember studying trigonometric functions in school, and having the worst time of my life. I didn't get them, I hated them and they had no practical purpose for me in real life. But it's kind of funny that I've come around to loving them, almost eight years after having been introduced to them for the first time.In mathematics the Sine function of an angle is defined as the ratio of the opposite side of an angle to it's hypotenuse. And it's exactly this definition that I hated so much in school. It doesn't really show you all the wonderful things that you can do with the Sine function, it's just a bland non-descriptive book definition. In the next part I'll explain why the Sine function is so great and how I like to think about it.\n\nSine functions are useful!\nThe Sine function is a conversion of linear motion into oscillating motion\n\nThe Sine function has two awesome properties. Firstly it is bounded by the interval [-1,1], and secondly, we can use it to convert a linear movement into an oscillating movement. You'll get what I mean with this in a second. \n\nLet's start with the definition of a Sine function: 'The Sine function of an angle is defined as the ratio of the opposite side of an angle to it's hypotenuse'. Personally, this definition is not extremely illustrative. For purposes of creative coding, the interesting property of this trigonometric function arises when you add a linearly increasing parameter to the mix. The simplest form of such a parameter that you can find in probably every programming language, is time. In P5JS you can get the current time since the moment of starting the program by invoking the millis() function. The millis() return time in milliseconds which is in fact a linearly increasing value. Plugging this value into the Sine function we'll obtain a radius that is sweeping around the circle. The animated gif below exemplifies this, and the snippet of code is what creates the animation. It looks a little messy, but I'll explain in detail in what follows.\n\n\n\n The exact code for this is a little bit more complicated:\n\nspeed = 4000\nfunction draw() {\n  ellipse(200, 200, 200)\n  stroke(255, 0, 0)\n  line(200, 200, sin(millis() / speed) * 100 + 200, 200)\n  stroke(0)\n  line(200, 200, sin(millis() / speed) * 100 + 200, cos(millis() / speed) * 100 + 200)\n  line(sin(millis() / speed) * 100 + 200, cos(millis() / speed) * 100 + 200,\n    sin(millis()/ speed) * 100 + 200, 200)\n}\n\n\n The red line that is contracting and expanding over time is drawn by the following command 'line(200, 200, sin(radians(millis()) / speed) * 100 + 200, 200)'. The P5JS line function takes 4 arguments, the x and y coordinates of the start point and the x and y coordinates of the end point of the line. By replacing the x coordinate of the end point by a sine function we can obtain this oscillating motion. Obviously, as stated earlier we need to give some input to the sine function, which will essentially be a function of time. We call the 'millis()' function to get the current time and divide it by a speed parameter. The speed parameter is used to slow down the movement so that the sweeping radius doesn't go haywire (try running the sketch without dividing by speed). Then, the last thing you still need to do, is to just wrap the result in the already inbuilt 'sin()' function and scale it appropriately such that it appears in the correct location on the canvas (which means multiply by the radius of the circle and translate it to the center of the circle).\n\nYou can also see two other lines, the sweeping radius and the line opposite to the angle formed by the radius and the red line, which is essentially the Sine. The rest of the code snippet show how to draw them.\n\nHow to use this in context\n\nYou see this is awesome, because it allows us to add a lot of interesting motion to our P5JS sketches (of course it's not limited to only P5JS). For example we can draw some points and have them move in a wavy pattern as you can see in the next animated gif.\n\n\n\nWe create a number of points in a for loop and modulate their y coordinate with a sine function which will be parametrized by their position in addition to time. This yields an oscillating wave shaped string of dots.\n\nfunction setup() {\n  createCanvas(800, 400);\n  speed = 2000\n}\n\nfunction draw() {\n  background(220);\n  strokeWeight(2)\n  ellipse(200, 200, 200)\n  stroke(255, 0, 0)\n  line(200, 200, sin(millis() / speed) * 100 + 200, 200)\n  stroke(0)\n  line(200, 200, sin(millis() / speed) * 100 + 200, cos(millis() / speed) * 100 + 200)\n  line(sin(millis() / speed) * 100 + 200, cos(millis() / speed) * 100 + 200, sin(millis() / speed) * 100 + 200, 200)\n  strokeWeight(4)\n\n  for (i = 0; i &lt; 100; i++) {\n    point((i * 4 + 400) % 400 + 350, sin(i/10+millis() / speed)*80 + 200)\n  }\n}\n\n\n",
        "url": "/blog/Continuous-oscillating-motion-in-P5JS-with-Sine-functions"
      },
    
      {
        "title": "Beautiful tablature and sheet music with Lillypond and Frescobaldi",
        "excerpt": "\n\nArchiving Ideas as a musician\nMy personal struggle keeping track of ideas\n One of the things that I've found to be very difficult over the years, is finding a good system for archiving and documenting your own musical ideas. Often I would simply make a quick phone recording (voice note) at the end of a practice session, sometimes even a short video, shot from an ungodly angle, with horrible audio quality. It's probably evident that listening back after a couple of weeks to these recordings does not really help me in remembering what I was actually playing, and the thought process at the moment of recording has also disappeared. Sometimes if I'm really desperate I manage to salvage what I can by trying to figure out the tune by ear, but If you're someone who enjoys obscure and abstruse alternate tunings then you've just made it even harder on yourself.\n\n",
        "content": "\n\nArchiving Ideas as a musician\nMy personal struggle keeping track of ideas\n One of the things that I've found to be very difficult over the years, is finding a good system for archiving and documenting your own musical ideas. Often I would simply make a quick phone recording (voice note) at the end of a practice session, sometimes even a short video, shot from an ungodly angle, with horrible audio quality. It's probably evident that listening back after a couple of weeks to these recordings does not really help me in remembering what I was actually playing, and the thought process at the moment of recording has also disappeared. Sometimes if I'm really desperate I manage to salvage what I can by trying to figure out the tune by ear, but If you're someone who enjoys obscure and abstruse alternate tunings then you've just made it even harder on yourself.\n\nDiscovering Tablature Software\n Luckily, humanity has already found a convenient way to represent musical ideas in a symbolic way: sheet music and tablature! In addition there's a number of softwares that allow you to create them. If you're a guitarist you've probably used, or at least heard, of Guitar Pro. I remember getting a cracked copy of guitar pro 5 from one of my friends at school on a USB drive many years ago, and I was absolutely blown away. I didn't have an internet connection at home at the time, so I would ask my friend to download the tab files for me and pass them on, again via USB, over the course of a couple of days. I also remember it giving me access to songs that were way out of my playing ability at the time. \n\nUntil after some time, when my desktop broke and I got a laptop. During my college days I had a notebook, in which I would religiously jot down all the jazz licks that I could come up with. But I also forfeited this habit with time, I didn't have a clear systematic way of notating my ideas and it was very obvious how things were meant to be played when I came back to my notes. Which recently led me to explore again what other tools exist for notating music. One of first that'll pop up would be Muse Score, which I tried but decided that it wasn't for me. I just couldn't get the hang of it. In guitar pro you can simply punch in the fret number on a specific fret and that's it. Muse Score being designed not specifically for guitarists is a lot more versatile, which was way too much for my purposes. I re-downloaded Guitar Pro 7, and messed around a little with the different sounds that already come with it for around a month until my free trial expired. After which I didn't really feel like breaking the bank to get a license. Finally I found something called Lillypond which peaked my interest.\n\n What's Lilypond? Frescobaldi?\n Markup Languages and Editors\n Lillypond is not a software per se, it is kind of a markup language. If you've never had to use one, you're better for it. Markup Languages can be thought of as a set of instructions that allow you to format and position elements in a document exactly the way you want. Personally, I use markup languages quite often as they're very convenient and allow you to create digital documents that look very slick. For example, I've come to prefer using Latex over MS Word. Documents made in Latex just look much better, and it makes positioning figures easier, especially when writing academic papers. Coming back from this tangent, Lillypond's primary goal is to create beautiful sheet music via a set of commands that specify what it should look like. We'll get into it in more depth in a minute. Lillypond can be used by itself, but to make easier to edit your script files you'll also want to download another software called Frescobaldi, which comes with a number of features. \n\nDownloading and Installing Lilypond and Frescobaldi\n\n\n  Download Lilypond Here\n  Download Frescobaldi Here\n\n\nSetting up Lilypond and Frescobaldi\n\n\n\t\t\t\n\t\t\t\n        After installing both softwares, go ahead and open up Frescobaldi. We have to tell Frescobaldi where to find Lilypond on our device. To do that click edit then preferences.\n\n\n  Click on Lilypond Preferences\n  Click the add button\n  Look for the 'Lilypond-windows.exe' where you installed Lilypond. On windows this should be somewhere on your C drive.\n  Make sure to check 'Run Lilypond with english English messages'\n\n    \n\n\nEngraving a simple sheet\n\n\n\t\t\t\n\t\t\t\n        We start engraving our music now. We can engrave notes by simply opening the brackets and typing in the appropriate letters.\n\\version \"2.18.2\"\n\n{c d e f}\n\n    \n\n\nEngraving music\nAs a guitarist that uses alternate tunings on a regular basis, Lilypond does not disappoint. I'll share the template that I use regularly and have modified over time.\n\n\\version \"2.18.2\"\n\n\\score{\n  \\relative {\n    \\tabFullNotation {\n      \\set Staff.stringTunings = \\stringTuning &lt;bes, f, bes, ees, f, d&gt;\n      \\time 4/4\n        \\repeat volta 2{\n          d16\\4 (ees\\4) g,\\3 (bes\\3) a\\2 d\\1 a\\2 bes\\3 \\tuplet 3/2 {ees8\\4 (f\\4) g,\\3} bes\\2 \\glissando d\\2 \\bar \"|\"\n\n          f16\\4 bes,\\3 c\\2 a'32\\1 (bes\\1 a16\\1) c,\\2 bes\\3 f'\\4 bes,8\\6 ees\\4 g,\\3 f\\2 \\bar \"|\"\n          g'4\\1 (f4\\1) f\\1 f\\1 \\bar \"|\"\n\n          \\break\n\n          ees16\\6 d\\4 bes\\3 f\\2 c'\\1 f,\\5 f'\\4 g,\\3 bes4\\1 bes4\\1 \\bar \"|\"\n\n          }\n          \\break\n\n          \\grace bes16\\6 f'\\4 g,\\3 bes\\3\\staccato bes\\6\n          bes8\\3\\staccato \\grace bes16\\6 bes\\3\\staccato  c16\\2 f\\4\n          g,\\3 &lt;bes\\3 f\\2&gt; \\staccato bes\\6 f8\\2 \\grace g'16\\6 g\\4 bes,\\3 \\bar \"|\"\n\n          \\break\n\n          c\\2 d\\2 c\\3 bes\\3 bes8\\3 \\grace bes\\6 bes\\3 bes4\\3 bes4\\1\n\n    }\n  }\n  \\header {\n    piece = \"Tuning:  A# F A# D# F D // Capo: 3rd fret\"\n  }\n}\n\n\n\\header {\n  title = \"Cotton Candy Dream\"\n  composer = \"Ahmad Y. Moussa\"\n}\n\n\nAnd we obtain sheet music that looks like this:\n\n\nThe number of ways you can format sheet music with Lilipond is insane and can be overwhelming at first. However there is an extensive documentation that is just a google search away in case you can't figure out how to do something specific.\n",
        "url": "/blog/Creating-beautiful-tabs-and-sheet-music-with-Lillypond-and-Frescobaldi"
      },
    
      {
        "title": "Sending MIDI signals between Ableton and P5JS",
        "excerpt": "\n\nIn this post we have a look a WebMIDI.js, a javascript library that'll allow to handle MIDI signals in p5js. This is especially useful if you want to create a visual interactive midi controller, or control you sketches with MIDI signals sent from your daw. In this post I'll show you how to do the latter.\n\n",
        "content": "\n\nIn this post we have a look a WebMIDI.js, a javascript library that'll allow to handle MIDI signals in p5js. This is especially useful if you want to create a visual interactive midi controller, or control you sketches with MIDI signals sent from your daw. In this post I'll show you how to do the latter.\n\nImporting WebMIDI.js\nIn an earlier blog post, I explain how one can send MIDI signals from a python script to ableton live, which requires us to create a virtual port.  This time around we'll also need the LoopMIDI virtual port that we have used for the python tutorial, so go ahead and download it from here.\n\nNext we'll hop over to the web editor where we have to configure a couple of things. In the web editor, directly underneath the the large 'play' button, there is a smaller arrow button. Clicking on it reveals to use that there are other files, in addition to 'sketch.js' which we are currently editing. Click on 'index.html'. In the '' tag you can a number of lines that are importing the P5JS library for us to use. Here we can also import other javascript libraries, such as WebMIDI.js. Go ahead and add the following line in the head tag of index.html: &lt;/p&gt;\n  \n&lt;script src=\"https://cdn.jsdelivr.net/npm/webmidi\"&gt; &lt;/script&gt;\n\nEnabling WebMIDI\nThe next thing we need to do is to check that WebMIDI works and that we can see the accesible MIDI ports. Inside the setup function we need to insert the following snippet of code:\n\nWebMidi.enable(function(err) { //check if WebMidi.js is enabled\n  if (err) {\n    console.log(\"WebMidi could not be enabled.\", err);\n  } else {\n    console.log(\"WebMidi enabled!\");\n  }\n}); \n\n\nIf you run your sketch now, and the console displays 'WebMidi enabled!' then you're good so far!\n\nCreating the MIDI listener\nThe next thing we have to do is creating a MIDI listener that listens to a MIDI port for signals and reacts on specific MIDI triggers.\nSetup\nGo ahead and fire up LoopMIDI and let it run in the background for now. Still within the setup function and inside the WebMidi.enable(function(err){}) clause we add this snippet of code:\n\n//name our visible MIDI input and output ports\nconsole.log(\"---\");\nconsole.log(\"Inputs Ports: \");\nfor (i = 0; i &lt; WebMidi.inputs.length; i++) {\n  console.log(i + \": \" + WebMidi.inputs[i].name);\n}\n\nconsole.log(\"---\");\nconsole.log(\"Output Ports: \");\nfor (i = 0; i &lt; WebMidi.outputs.length; i++) {\n  console.log(i + \": \" + WebMidi.outputs[i].name);\n}\n\n\nRunning this code you should get this output in the console:\n\nWebMidi enabled! \n--- \nInputs Ports:  \n0: loopMIDI Port \n--- \nOutput Ports:  \n0: loopMIDI Port \n\n\nSelecting the correct port\n//Choose an input port\ninputSoftware = WebMidi.inputs[0];\n//The 0 value is the first value in the array\n//meaning that we are going to use the first MIDI input we see\n//which in this case is 'LoopMIDI port'\n\n\nThe listener\nAnd lastly we need to create the actual listener:\n//listen to all incoming \"note on\" input events\ninputSoftware.addListener('noteon', \"all\",\n  function(e) {\n    //Show what we are receiving\n    console.log(\"Received 'noteon' message (\" + e.note.name + e.note.octave + \") \" + e.note.number + \".\");\n\n    //the function you want to trigger on a 'note on' event goes here\n  }\n);\n\n//The note off functionality will need its own event listener\n//You don't need to pair every single note on with a note off\ninputSoftware.addListener('noteoff', \"all\",\n  function(e) {\n    //Show what we are receiving\n    console.log(\"Received 'noteoff' message (\" + e.note.name + e.note.octave + \") \" + e.note.number + \".\");\n\n    //the function you want to trigger on a 'note on' event goes here\n  }\n);\n\n//\n//end of MIDI setup\n//\n\nAnd we're good! Hit the run button and hop over to Ableton.\n\nConfiguring Ableton\nIn ableton we now need to create a MIDI track, arm it and set the output of it to the virtual port, which is 'LoopMidi port'. Lastly also set the input of the track to your MIDI controller, or to your computer keyboard. Now if you hit a button or key, the console in P5JS should print the corresponding note name. Now you can do all sorts of crazy stuff, making your animations react to MIDI inputs from Ableton, or from other softwares. Next blog post will have a hand on tutorial for making a sketch that is in sync with your MIDI signals. Thanks for reading!\n\n",
        "url": "/blog/A-tutorial-on-sending-MIDI-signals-between-Ableton-and-P5JS"
      },
    
      {
        "title": "Making an animated GIF from a sequence of frames with FFMPEG",
        "excerpt": "\nvia GIPHY\n  \nGifs are cool, but making them can be tricky. In the past 2 years I've had to make a lot of powerpoints for university presentations, and I've always wanted to make them the best they could possible be, aesthetically and information wise. And what's better than having a lot of cool images and graphs in your presentation? Visualizing processes with animated gifs. Since the focus of my studies were neural networks which involved training them, I would most often want to visualize this learning process by drawing a sample output from my model at every learning iteration (epoch), which in turn would allow me to qualitatively assess how well it was performing. This usually made me end up with a folder on my desktop that held hundreds to thousands of images. Including this sequence of frames as an animated GIF in your powerpoint is very impressive, and usually gives a lot of insight on the training process that you wouldn't usually see if you only inspected single frames.\n\n\n",
        "content": "\nvia GIPHY\n  \nGifs are cool, but making them can be tricky. In the past 2 years I've had to make a lot of powerpoints for university presentations, and I've always wanted to make them the best they could possible be, aesthetically and information wise. And what's better than having a lot of cool images and graphs in your presentation? Visualizing processes with animated gifs. Since the focus of my studies were neural networks which involved training them, I would most often want to visualize this learning process by drawing a sample output from my model at every learning iteration (epoch), which in turn would allow me to qualitatively assess how well it was performing. This usually made me end up with a folder on my desktop that held hundreds to thousands of images. Including this sequence of frames as an animated GIF in your powerpoint is very impressive, and usually gives a lot of insight on the training process that you wouldn't usually see if you only inspected single frames.\n\nNaturally, making gifs from a sequence of frames is not only useful academically, but can also be used for other purposes. Since I couldn't figure out how to capture a gif directly from the P5JS web editor of my canvas, I resorted to downloading individual frames and then concatenating them into a gif. Now the problem with gifs is that there has to be some compression algorithm involved that reduces the overall size of the final gif. Digital images can already take up a significant amount of space on your hard disk, depending on the resolution and encoding format, however it usually is the case that there is not a lot of change between two consecutive frames, for example, the backdrop of a scene doesn't always change significantly, only the main object that's moving. In this case it would be very wasteful to not encode some shared information jointly between different frames.\n\nFFMPEG\n\nIn this post we will mainly focus on using FFMPEG for creating a GIF from a sequence of individual frames. FFMPEG stands for Fast Forward MPEG and is designed to be an open source command-line tool for video and audio handling. In other terms, it allows us to convert video and audio media from any format to any other format. For example, it allows us to convert mp4 videos to the avi format, or wav audio files to mp3, etc. and additionally has a plethora of options to choose from, which allows us to exactly encode data in the exact format that we desire. I often use it to convert m4a audio recordings from my phone to mp3 recordings, which can then be imported in Ableton Live.\n\nInstallation\n\nSimply head over to  https://ffmpeg.org/download.html  to download the latest version and follow the  WikiHow  steps on how to install it. There would be no point in me repeating the steps here as the WikiHow tutorial already does a great job at it. However the trickiest part of installing FFMPEG might be adding the exectuable to your Path. This step is necessary since FFMPEG only comes as source code, and adding it to your path will allow you to use FFMPEG from the command line from any directory.\n\nUsing FFMPEG\n\nOnce that's done, you'll have to open up a terminal. Go ahead and navigate to the folder where your sequence of frames is, and I'll give you a Pro Tip: you can type 'cmd' in the address bar of the windows file explorer and it'll open a terminal that's already pointed at the directory that you've invoked it from. Next, we'll actually use ffmpeg. Making a gif with ffmpeg is a two step process, first you'll want to turn the sequence of frames into a video, and then convert that video to the .gif format. The first step is done with the following command:\n\nffmpeg -f image2 -framerate 30 -i image%d.jpg video.mp4\n\n\nThe first command is 'ffmpeg' which tells the terminal that what follows is an ffmpeg command. '-f image2' is an option that specifies the file type of the input. Here we are indicating that what follows will be a sequence of images. '-framerate 60' specifies the target framerate that we want to have in our output video. This is important as it indicates how many images per second we want to show, and essentially allows you to control the playback speed, if you set it to higher values. '-i image%d.jpg' specifies the name of each image in the sequence of frames in your directory. This is quite important, you want to make sure that your sequence of frames are named in increasing order, so for example 'image%d.jpg' means that ffmpeg expects the frames to be name as follows: image0.jpg, image1.jpg, image2.jpg, ... and so on. 'video.mp4' and lastly we have to specify the name and file exetension of the output, which in this case will be .mp4, but you can try other video formats and see if they work. If not ffmpeg will throw an error.\n\nThe next step consists of converting the video into a GIF, and keeping the size of the GIF on disk reasonable. GIFs are very bad at compression, in comparison to the .mp4 format. The gif that I used for testing to write this post had a little over 1000 frames all of which amount to roughly 20mb on disk. The encoded .mp4 at 60 frames per second would only be 150kbs in comparison. This is a considerable difference in size (even though the reduction depends on what is happening in the frames of the video). To convert the .mp4 to a .gif and keep it's size reasonable we can use the following command:\n\nffmpeg -i video.mp4 -vf \"fps=10,scale=320:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse\" -pix_fmt rgb24 -loop 0 out.gif\n\n\nThis will drastically affect the quality of the .gif and not have a size as small as the .mp4, but will do the job. Credit where credit is due, the command is explained in detail in this StackExchange answer\n\n\n",
        "url": "/blog/Making-an-animated-GIF-from-a-sequence-of-frames-with-FFMPEG"
      },
    
      {
        "title": "Brian Eno's Endless Music Machines",
        "excerpt": "“One of my long-term interests has been the invention of ‘machines’ and ‘systems’ that could produce musical and visual experiences… [T]he point of them was to make music with materials and processes I specified, but in combinations and interactions that I did not.” — From “Generative Music” in A Year With Swollen Appendices\n\n",
        "content": "“One of my long-term interests has been the invention of ‘machines’ and ‘systems’ that could produce musical and visual experiences… [T]he point of them was to make music with materials and processes I specified, but in combinations and interactions that I did not.” — From “Generative Music” in A Year With Swollen Appendices\n\n\n\n\nAn endless stream of ever changing music\nMy journey into Ambient Music\nMy love for ambient music started when I first listened to artists like Tycho and Jake Bowen. When listening to some of their pieces, I often feel like I'm being taken away into a distant world, entirely drawn through the narrative that the music is telling. In this captivated state I can't help but feel a deep sense of serenity and melancholy. Among others, they were maybe the first two artists that inspired me to get into electronic music myself. And I couldn't help but be mind-blown when I saw all the possibilities that modern softwares offer.\n\nFor instance, I can have an entire orchestra at my disposition at any time of the day. Which makes me think how tedious it must have been for composers before our time, we now have the incredible luxury of not just being able to hear our compositions at any given instant, but we can also manipulate sound as if it were a physical entity. Lest I go on a tangent, with these modern tools many have attempted the creation of systems that are capable of generating streams of music, all by themselves, and without any further human input. The most noteworthy individual among them might be Brian Eno.\n\nThe Origins of Generative Music\nWho's Brian Eno?\nGenerative Music finds it's beginnings with Brian Eno, an English musician and record producer, who first got interested in Generative Music by observing wind chimes, and how they could endlessly create different sounds, without ever repeating themselves. By design, they are incapable of creating the same sound twice as they react to some current of wind that brings them into motion. This sparked in Brian Eno an idea of creating a system that was capable of continuously generating a stream of music that was ever changing. His first experiments involved playing around with tape recorders, that would play melodic parts he pre-recorded, which would musically work together when played at the same time. Playing these tape recorder at modulating speeds and different offsets made it such that an entirely new musical piece emerged that never repeated itself.\n\nWhat is Generative Music Exactly?\nGenerative music, also known as procedurally generated music, is created by a system according to some pre-defined algorithmic rules, that are capable of arranging musical ideas in a coherent manner. This arrangement happens in such a manner that the emerging musical patterns may or may not repeat over the course of some time.\nAlgorithmic Rules can generally mean a broad number of things, ranging from simple rules such as simple ratios and probabilities but also more complex types of sequencing and automatic composition. In this manner, the generated music is never truly 'random', it does follow specific patterns, which should not be immediately evident to the listener.\n\nEno's work\n\n\nThe thought process behind Eno's Work\nEvolving metaphors, in my opinion, is what artists do\nIn his 1996 talk \"Evolving metaphors, in my opinion, is what artists do.\" he explains that one of his inspirations were pieces of music such as 'It's gonna rain' by steve reich. It's a fairly long piece, built on a fairly simple idea. It essentially loops the same sample over and over again played back on two machines at the same time, due to the minute differences in speed between the two machines it makes it such that the sample slips in and out of sync with itself, creating very interesting textures. \nWhilst reading the transcript of the speech, I quickly opened Youtube and listened a little bit to the piece, and skimmed back and forth a bit. Back to the transcript, Brian gives a visual analogy. Usually when you stare at something for a long time, you start noticing things that you wouldn't have immediately noticed from a first glance. Your ear works in the same manner, if you listen to the same thing over and over again, you become infinitely more aware of the small details that are present in the repeated sample. This is what happens in Steve Reich's track, even though the sample might seem a little silly at first, it is incredibly rich with information. Brian mentions that there are sounds of pigeons on the track, which I didn't hear in my first listening. Which made me go back for a second listening, and indeed after a while you start hearing some bird like sounds, even though them being very feeble\n\nMoiree Patterns\nHe gives another visual analogy, that of Moiree Patterns. Moiree patterns are interference patterns, patterns that emerge from overlapping two grid-like patterns:\nNow a moire pattern is when you overlay two identical grids with one another. Here's one, here's the other. Now when I overlay them, see what happens, you get a very complicated interaction. You get something that actually you wouldn't have predicted from these two original identical sheets of paper. This is actually a very good analog of the Steve Reich piece in action. Something happens because of one's perception rather than because of anything physically happening to these two sheets of plastic which produce an effect that you simply couldn't have expected or predicted.\n\n\nAnd here's an example of a Moiree Pattern:\n\n\nThe mechanics of Eno's work\nMusical Moiree Patterns\nBeing inspired and impressed by Steve Reich's track and the concept of Moiree Patterns, that is, complex patterns emerging from overlapping simple patterns, he attempted to approach composition in his manner. In a similar manner to the picture that you can see above, Eno tried to overlap simple patterns and obtain a more intricate whole. Naturally, music is something that progresses as time goes on, and one can only experience a single moment of the piece at any given time, as opposed to an image, which you can observe in it's entirety at any given time. To simulate Moiree Patterns in a temporal manner, Eno recorded several different notes, each on a separate tape recorder, and configured them such that they looped at different intervals, thus creating a stream of music that seems to have an infinite number of variety as the played notes interact differently with each other over time.\n\n Music for Airports, at least one of the pieces on there, is structurally very, very simple. There are sung notes, sung by three women and my self. One of the notes repeats every 23 1/2 seconds. It is in fact a long loop running around a series of tubular aluminum chairs in Conny Plank's studio. The next lowest loop repeats every 25 7/8 seconds or something like that. The third one every 29 15/16 seconds or something. What I mean is they all repeat in cycles that are called incommensurable -- they are not likely to come back into sync again. \n\nIn a way, this is very similar to polyrhythms, but on a much larger scale, which is ingenious to me.\n\nCreating my own generative music system\nUsing sequencers and python scripts\nFor a while now, I've been becoming more obsessed with creating a system that can generate or at least simulate a stream of music with endless variety. However I've found it quiet difficult to find the right tools for it. For example, even though Ableton Live provides a sequencer, it doesn't allow for much control on the sequencing, such as assigning a probability to each step in the sequence, making it such that the loop doesn't repeat the exact same way every iteration. After discovering that I can send MIDI signals from a python script to Ableton I attempted writing scripts that would send random MIDI notes quantized to a scale and play them. Random MIDI notes, even if they're quantized don't sound very good, and designing intricate melodic sequences that are proceurally generated or at least procedurally conditional is very difficult. There are  many more ways in which I attempted to tackle this problem, all while not having to spend any money on gear or software, which I will probably talk about in one of my future posts.\nEno goes on to talk about other inspirations that he encountered in the coming years of his career, such as Conway's Game of Life (which I will definitely discuss in a future post) amongst others. The entire transcript of the talk can be found here, it's a very interesting and very entertaining talk and I recommend having a look at it.\n",
        "url": "/blog/Brian-Eno's-Endless-Music-Machines"
      },
    
      {
        "title": "Rectangle Packing&#58; An incredibly difficult problem that seems trivial at first",
        "excerpt": "\n\n",
        "content": "\n\nIt often happens that I have an idea for a sketch, which in my mind, seems relatively simple to implement; however, when the time comes and I'm free to start working on it, I have literally no clue where to even begin. This is usually because I severly underestimated the complexity of the problem at hand.\nFor instance, recently I've stumbled across a number of P5JS and Processing sketches, that try to fit as many simple shapes as possible, where each shape has a different size, into an area of limited size. This is usually called packing, or more comonly known as packing problems. It seemed worthwhile to learn a little bit more about them.\n\nPacking Problems\n\nA little bit further down the rabbit hole, I find out that packing problems are actually a quite difficult family of mathematical optimization problems. This doesn't discourage me however, but rather makes the problem even more exciting as well as challenging. Wikipedia explains the problem much more eloquently than what I'm capable of:\n\n\nPacking problems are a class of optimization problems in mathematics that involve attempting to pack objects together into containers. The goal is to either pack a single container as densely as possible or pack all objects using as few containers as possible. [...] Usually the packing must be without overlaps between goods and other goods or the container walls. In some variants, the aim is to find the configuration that packs a single container with the maximal density. More commonly, the aim is to pack all the objects into as few containers as possible.\n\n\nEssentially, we'll want to jampack the largest possible number of items into the least amount of space. This type of problem is usually studied in the context where you have multiple bins or containers which you want to fill optimally with the items at hand, however we're only going to concern ourselves with the case were we have one bin (which is not to be confused with the knapsack problem, which might be a topic for a future post).\n\nWhy is Rectangle Packing so difficult\n\nOptimization problems are generally not my cup of tea, and even though I've had to take some courses on algorithmic complexity as well as convex optimization during my time at university, it's usually way over my head, however I will attempt to explain succinctly.\n\nLet's have look at some trivial examples. How would you optimally place a handful of rectangles, such that they take the least amount of space possible? For a small number of rectangles it's probably quiet easy to do by hand:\n\n\n      \n      \n      \n \n\n\n\nNow consider the case where you have to arrange more rectangles, it'll probably take you a lot more time to do so by trial and error, and you can see that some of the examples below are far from being optimal:\n\n\n\t\n\t\n\t\n\n\n\nYou can see that the complexity of the problem scales with it's size. This innocent looking problem, reveals itself to be a monstrosity of a conundrum. Another problem is, can we even check that our arrangment is optimal? Well, technically yes, however, there is no known strategy to finding that optimal solution. In fact bin packing problems are at least NP-hard, and the best we can do currently is solving them with heuristic methods that find solutions relatively quick. The literature on packing problems is quite extensive, one really interesting paper on the topic is 'A Thousand Ways to Pack the Bin - A Practical Approach to Two-Dimensional Rectangle Bin Packing' by Jukka Jylänki, which is a relatively old paper from 2010. So you can see that I'm probably not going to be able to create a better algorithm than what the literature has already suggested. \n\nAnother interesting paper was quite old 'The bottom-left bin-packing heuristic: An efficient Implementation' from 1983 by Bernard Chazelle. And I do have a weak spot for old papers, especially when they have figures that must have taken a lot of effort to make back then. I found it through this heated stackoverflow thread that was also inquiring about a solution for the rectangle packing problem, and is as of now more than 11 years old.\n\n Creating the visualizations \nAfter staring at my laptop screen for more than two hours with frustration, trying to implement some simple version of a greedy heuristic algorithm that will neatly pack my rectangles, I ultimately gave up and started looking for already implemented algorithms.\n\nPython rectpacker\nfrom rectpack import newPacker\n\nrectangles = [(50,50),(100,50),(25,45),(80,60),(40,60),(40,30)]\nbins = [(200, 200)]\n\npacker = newPacker()\n\n# Add the rectangles to packing queue\nfor r in rectangles:\n\tpacker.add_rect(*r)\n\n# Add the bins where the rectangles will be placed\nfor b in bins:\n\tpacker.add_bin(*b)\n\n# Start packing\npacker.pack()\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import patches\n\noutput = []\nfor index, abin in enumerate(packer):\n  bw, bh  = abin.width, abin.height\n  print('bin', bw, bh, \"nr of rectangles in bin\", len(abin))\n  fig = plt.figure()\n  ax = fig.add_subplot(111, aspect='equal')\n  for rect in abin:\n    x, y, w, h = rect.x, rect.y, rect.width, rect.height\n    output.append([x,y,w,h])\n    plt.axis([0,bw,0,bh])\n    print('rectangle', w,h)\n    ax.add_patch(\n        patches.Rectangle(\n            (x, y),  # (x,y)\n            w,          # width\n            h,          # height\n            facecolor=\"#00ffff\",\n            edgecolor=\"black\",\n            linewidth=3\n        )\n    )\n  fig.savefig(\"rect_%(index)s.png\" % locals(), dpi=144, bbox_inches='tight')\n\n# printing the rectangle coordinates to plot them in P5JS\nprint(output)\n\n\nIf you'd like to use different packing algorithms, you can simply import them as such:\nimport rectpack.guillotine as guillotine\npacker = newPacker(pack_algo=guillotine.GuillotineBafSas)\n\n\nThe framework and the list of the supported algorithms can be found here\n\nVisualizing it in P5JS\nEven though I love matplotlib, I'm not a big fan of the rectangles look, hence I've used P5JS to visualize them, which gives us some more flexibility in the appearance.\nvar listOfColors = [\"#01295f\",\"#22547b\",\"#437f97\",\"#64895e\",\"#849324\",\n\t\t\t\t\"#c2a31a\",\"#ffb30f\",\"#fe6415\",\"#fd151b\",\"#fd2a30\"]\n\nvar rectangles = [[0, 0, 250, 250], [250, 0, 100, 200], [250, 200, 100, 200]]\n\nclass Item {\n  constructor(x, y, w, h, c) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.c = listOfColors[int(random(0, listOfColors.length))];\n  }\n\n  display() {\n    strokeWeight(2)\n    fill(this.c);\n    rect(this.x, this.y, this.w, this.h);\n  }\n}\n\nclass Pack {\n  constructor(x, y, w, h, numItems) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.c = 0;\n\n    this.numItems = rectangles.length;\n    this.items = [];\n\n    for (let i = 0; i &lt; this.numItems; i++) {\n      this.items.push(new Item(rectangles[i][0],\n                               rectangles[i][1],\n                               rectangles[i][2],\n                               rectangles[i][3]))\n    }\n  }\n\n  sortByLargestArea() {\n    while (this.items.length &gt; 0) {\n      console.log(this.items.length)\n      var largestArea = 0\n      var largestAreaIndex = 0\n      for (let i = 0; i &lt; this.items.length; i++) {\n        if (this.items[i].w * this.items[i].h &gt; largestArea) {\n          largestArea = this.items[i].w * this.items[i].h;\n          largestAreaIndex = i;\n        }\n      }\n      this.itemsDone.push(this.items.splice(largestAreaIndex, 1)[0]);\n    }\n  }\n\n  display() {\n    for (let i = 0; i &lt; this.items.length; i++) {\n      this.items[i].display();\n    }\n  }\n}\n\nfunction setup() {\n  createCanvas(500, 500);\n  packer = new Pack(0, 0, 100, 100, 10);\n}\n\nfunction draw() {\n  background(220);\n  packer.display();\n}\n\n\nAnd this pretty much sums up the post, if you've enjoyed reading this post as much as I enjoyed writing it, feel free to leave a comment or subscribing to my mailing list. Otherwise, check out some other posts, who knows, maybe you'll find something that interests you! Cheers!\n",
        "url": "/blog/Rectangle-Packing_-An-incredibly-difficult-problem-that-seems-trivial-at-first"
      },
    
      {
        "title": "Modulating Shapes and Creating Patterns in P5JS with Sines and Cosines",
        "excerpt": "\n    \n        \n        \n        \n    \n\nContinuously evolving your sketches\nMy very first post on this website explains how to create a arbitrarily sized grid of shapes, which I think teaches a very important concept, which is 'instancing'. Thinking in an object oriented manner can go a long way when creating sketches, and can lead to having code that follows a modular structure.\n\n",
        "content": "\n    \n        \n        \n        \n    \n\nContinuously evolving your sketches\nMy very first post on this website explains how to create a arbitrarily sized grid of shapes, which I think teaches a very important concept, which is 'instancing'. Thinking in an object oriented manner can go a long way when creating sketches, and can lead to having code that follows a modular structure.\n\nOnce you code up a working sketch with such a structure, simply changing one parameter can lead to an entirely different behaviour. At that point you're not really 'coding' your sketch anymore, but you're 'playing' with it.\n\nSketch from Scratch\nIn this blog post I'd like to explain what's going on in this Sketch specifically:\n\n\n\nIt might not be very obvious, but the secret ingredient behind the motion in this sketch are trigonometric functions. I talk a little about trigonometric functions in this previous blog post.\n\nIntuition behind the Sketch\nEssentially, we're creating a grid of objects, each of which holds a number of parameters and display() function to draw itself to the canvas. The parameters include it's position and size, and optionally also it's color. The heavy lifting happens in the display() function. Since every rectangle is continuously redrawn, what if we were to change their size and color over time? We could simply do so by modulating the size attribute with a sine function. But first things first, let's create the grid.\n\nThe grid\n\n\nFor the sake of clarity I'll brush over the code for creating the grid, however a more detailed explanation can be found here. This snippet, that constitutes the largest part of the code, creates a 'Grid' object which holds an array of 'Square' objects. Invoking the display function of the Grid object will in turn call all the display functions of each Square object and draw them to the canvas, depending on it's position. The grid object takes care of positioning the Squares such that you can create grids with an arbitrary number of rows and columns:\nclass Square {\n  constructor(px, py, s) {\n    this.positionX = px;\n    this.positionY = py;\n    this.curvature = 1;\n    this.size = s;\n    this.c = 0;\n  }\n  \n  display() {\n    strokeWeight(3)\n    rect(this.positionX - this.size / 2, this.positionY - this.size / 2,\n          this.size, this.size, this.curvature)\n  }\n}\n\nclass SquareGrid {\n  constructor() {\n    this.squares = []\n    this.gridWidth = 20;\n    this.gridHeight = 5;\n    this.squareSize = 20;\n    this.spacing = 24;\n    this.positionX = width / 2 - ((this.gridWidth - 1) * (this.spacing)) / 2;\n    this.positionY = height / 2 - ((this.gridHeight - 1) * (this.spacing)) / 2;\n    for (let i = 0; i &lt; this.gridWidth; i++) {\n      let row = []\n      for (let j = 0; j &lt; this.gridHeight; j++) {\n        row.push(\n          new Square((this.positionX + this.spacing * i), (this.positionY + this.spacing * j), this.squareSize)\n        )\n      }\n      this.squares.push(row)\n    }\n  }\n\n  display() {\n    for (let i = 0; i &lt; this.gridWidth; i++) {\n      for (let j = 0; j &lt; this.gridHeight; j++) {\n        this.squares[i][j].display()\n      }\n    }\n  }\n}\n\nfunction setup() {\n  createCanvas(500, 200);\n  grid = new SquareGrid()\n}\n\n\nfunction draw() {\n  background(255);\n  grid.display();  \n}\n\n\nModulating the Rectangle's size\nAs I already mentioned, since the rectangles are continuously redrawn, it would be interesting to plug something more interesting into it's 'this.size' attribute, rather than just a fixed number. For example, a sine function! We also need the millis() function that p5js provides to get motion out of the sin() function. The sine function now start oscillating between it's two bounds, that are -1 and 1, and we need to scale it accordingly to obtain any visual change, in this case I just multiply it by 14, which is adequate for the canvas and rectangle size we are using. You might have to change this number if you change the canvas size and the overall size of you drawn objects. Additionally I divide millis() by a value, which essentially just slows down the osciallting movement of the sine function. Otherwise it would be nauseatingly fast.\n\n\nclass Square {\n  constructor(px, py, s) {\n    this.positionX = px;\n    this.positionY = py;\n    this.curvature = 1;\n    this.size = s;\n    this.c = 0;\n  }\n  \n  display() {\n    strokeWeight(3);\n    \n    // This Line is all that changed\n    this.size = 20 + 14 * sin(millis() / 500);\n    rect(this.positionX - this.size / 2, this.positionY - this.size / 2, this.size, this.size, this.curvature, this.curvature, this.curvature, this.curvature);\n  }\n}\n\n\nSine function with respect to x coordinate\nHere's where things become interesting, what if we were to plug in another attribute into the sine function? For instance, the x coordinate of the drawn object? This would offset the sine function by some amount, and the size of each one of the rectangles wouldn't uniformly increasing and decreasing. Here you can see the effect:\n\ndisplay() {\n    strokeWeight(3);\n    \n    // This Line is all that changed\n    this.size = 20 + 14 * sin(this.positionX + millis() / 500);\n    rect(this.positionX - this.size / 2, this.positionY - this.size / 2, this.size, this.size, this.curvature, this.curvature, this.curvature, this.curvature);\n}\n\n\nSine function with respect to y coordinate\nWhat about the Y coordinate?\n\nthis.size = 20 + 14 * sin(this.positionY + millis() / 500);\n\nSine function with respect to x and y coordinate\nWhat if we were to use both X and Y coordinates?\n\nthis.size = 20 + 14 * sin(this.positionY +this.positionX + millis() / 500);\n\nAdding Color\nNow we can apply this same concept to the color of each object. And we're not just limited to the sine function, we could alternatively use a cosine function or a combination of the two. The possibilities really are endless!\n\nfill(127.5 + 127.5 * cos(this.positionX + tan(millis() / 5000) + millis() / 500), 127.5 + 127.5 * sin(this.positionY + cos(millis() / 500) + millis() / 500), 120.5)\n\n\n\nThis is it for today's blog post, if you have any questions leave a comment, or shoot me a message directly on any of my social medias! If you enjoyed this article, consider subscribing to my mailing list, or if you'd like to support this website, consider sharing this article.\n",
        "url": "/blog/Modulating-Shapes-and-Creating-Patterns-in-P5JS-with-Sines-and-Cosines"
      },
    
      {
        "title": "Getting started with Tezos and minting on hicetnunc.xyz",
        "excerpt": "\n\n\n",
        "content": "\n\n\nTo get straight to the point, you essentially need these two things:\n\n\n  A hicetnunc compatible Tezos wallet\n  Some tez in your Tezos wallet\n\n\nAnd then you’re ready to get started with minting on the Tezos blockchain via hicetnunc.xyz (if the hicetnunc.xyz isn’t loading or showing a blank page, don’t panic the page is still being developed).\n\nTezos Wallets\n\n\nThere’s many different wallets all with their pros and cons, 4 of which are currently suported by hicetnunc.xyz: Temple Wallet, Spire, Galleon and Kukai.\n\n\n\nPersonally I use Temple Wallet because it’s the first one I tried and seems convenient so far. Once you install the extension or desktop app, you’ll have to create a wallet. You will be asked to set up a seed phrase and store it somewhere secure so you remember it later. This is very important, store your seedphrase securely! Otherwise you might not have access to your money anymore!\n\nOnce you have your wallet set up, you’re ready to receive tez in it. You can either set up an account on an exchange site like coinbase and binance, exchange some fiat currency for tez and then send them to yourself, or alternatively, have someone who already has some tez send some to you. Where the easier option is the latter. Some kind people on Twitter are actually giving out some tez for free to get you started, such as these guys here. Nonetheless, you’ll eventually have to set up an exchange account anyway to trade in your cryptocurrency for real money.\n\nMinting on Hicetnunc.xyz\n\n\n\nIf you’re ready to mint your first #CleanNFT and you have at least 0.08 XTZ in your wallet (it costs a small fee to mint the NFT), then you’re good to go! Head over to hicetnunc.xyz, click the drop down icon in the top right corner and click ‘OBJKTs (mint NFTs)’. The term OBJKT is basically hicetnunc’s alias for NFTs. It’ll take you to a page where you have to fill out some details about the NFT you want to mint:\n\n\n  A quirky name for your OBJKT\n  A brief description about the NFT. Also make sure to include your Twitter handle in this description, various Twitter bots are tweeting out all the NFTs that go live on  hicetnunc in real time. Including your Twitter handle allows potential buyers to verify that you’re the original creator.\n  And thirdly some tags relevant to the NFT. They don’t do anything just yet, but will probably play a role sometime in the future for organizing the content on the website.\n  Lastly you’ll have to specify how many editions you want to have of the minted OBJKT. This essentially specifies the rarity of your NFT, so set your number accordingly. This also determines how much it will cost to mint the OBJKT, each edition you mint costs you 0.08 XTZ. So minting 3 editions of your OBJKT will cost you 0.24 XTZ. Keep that in mind, lest you type in some arbitrarily large number.\n\n\nNow hit the ‘mint’ button. It’ll notify that you have to ‘sync’ first, with a pop up window. Hit ‘sync’ in the upper right corner, grant permission with your wallet, then try pressing mint again. It’ll ask you for another notification from your wallet to execute the transaction. The Temple wallet should show you sccuess message in the top right corner, or something else if something goes wrong. If everything went well it should have minted your NFT.\n\nManaging and curating your assets\n\n\nAfter minting your OBJKT wait 2-3 minutes then click the drop down menu again, and click ‘manage assets’. Your wallet is going to ask for permission. Now it should show you a page that contains your OBJKT with it’s resective number (if it doesn’t then wait a while longer before you try minting it again, sometimes it just doesn’t mint it). Click on your OBJKT, and it should take to a page that is displaying your OBJKT in all it’s glory with the information you’ve entered earlier below it.\n\nYour NFT is minted, but you still have to offer it up for purchase. Hit ‘sync’, and some new buttons should show u next to ‘info’ and ‘owners’. Click on the ‘curate’ button (it could also have a different name like ‘swap’, depending on what the devs decide to call it). It’ll make two fields apear underneath it ‘objkt amount’ and ‘price per objkt (in tez)’. The first field will specify how many of the OBJKTs you minted you want to offer up for auction. If you minted 3 editions of your OBJKT earlier, you might want to offer up 2 of them for purchase and keep one for yourself, hence you would enter 2 in this field. In the next field you’ll enter the price you want to sell each edition of your your OBJKT for. Depending on how much work you’ve put into your OBJKT this might vary. Keep in mind how much 1 XTZ is in USD, currently 1 XTZ is about 4 USD, so you’ll have to see for yourself how much you value your art. Then just hit ‘curate’ and after a couple of minutes your NFT will be ready for purchase.\n\nNow go and spread the word about it on Twitter or Reddit, so that people can find your NFT and buy it.\n\n",
        "url": "/blog/Getting-started-with-Tezos-and-minting-on-hicetnunc.xyz"
      },
    
      {
        "title": "Erste Schritte mit Tezos und minting auf hicetnunc.xyz",
        "excerpt": "\n\n\n",
        "content": "\n\n\nFalls du in letzter Zeit mal bei Twitter reingeschaut hast, dann ist dir sicher schon aufgefallen, dass Begriffe wie NFT, Crypto-Kunst (crypto art) und Block-Chain im Trend liegen. Um jeden dieser Begriffe zu diskutieren, reicht ein Blog-Beitrag nicht aus. Ich erkläre aber, was eine NFT ist und wie du selbst dein Erstes auf der umweltfreundlichen Tezos-Blockchain prägst (“to mint an NFT” auf English).\n\nWas sind eigentlich NFTs?\nNFT steht für Nicht fungibles Token (Non-Fungible Token); am besten lassen sie sich mit originalen Sammlerstücken in der realen Welt vergleichen. Dank der Blockchain-Technologie ist es nun möglich, echte originale auch digital zu erstellen, und dies wiederum ermöglicht es Künstlern, ihre Kunst vollständig digital zu verkaufen und zu versteigern. Im Allgemeinen gibt es zwei Arten von Blockchains: PoW und PoS. Sowhol die Bitcoin- und Ethereum Blockchain erfordern intensive und leistungshungrige GPU-Operationen, da sie den Proof of Work Konsens-Algorhythmus verwenden, um Transaktionen abzuschließen. Im Gegensatz dazu verwendet die Tezos Blockchain das energiesparende Proof-of-Stake und arbeitet dadurch mehrere tausend Mal energieeffizienter als PoW-Blockchains. Tezos ist daher eine (vergleichsweise) sehr umweltfreundliche Blockchain. Wenn du mehr über Blockchains und Kryptowährungen erfahren möchtest, empfehle ich dir dieses Video von 3Blue1Brown anzusehen, in dem alles sehr gut erklärt wird.\n\nKrypto Wallet (Geldbörse)\nDu brauchst im Wesentlichen diese zwei Sachen:\n\n\n  Eine hic et nunc-kompatible Tezos-Wallet\n  Einige tez in deiner Tezos-Wallet\n\n\nEine Krypto Wallet ist sozusagen eine digitale Geldbörse, eine Adresse auf der Blockchain, in der du deine Krypto-Währung aufbewahrst. Auserdem benötigst du sie um Krypto-Transaktionen zu auszuführen. Einen hilfreichen Artikel findest du  hier. Nun dann kannst du mit dem Prägen deiner NFTs auf “hic et nunc” beginnen.\n\nTezos Wallets\n\n\nEs gibt verschiedene Wallets, jedes mit seinen Vor- und Nachteilen. Derzeit unterstützt hicetnunc.xyz vier Wallets: Temple Wallet, Spire, Galleon und Kukai.\n\n\n\nIch persönlich benutze die Temple Wallet, da sie mir bisher sehr praktisch erschien. Sobald du also eine Wallet als Chrome-Extension oder Desktop-App installiert hast, musst du eine Wallet erstellen. Du wirst aufgefordert, eine Seed-Phrase einzurichten und an einem sicheren Ort aufzubewahren. Dies ist sehr wichtig: Bewahr die Seedphrase immer sehr sicher auf! Wenn du sie verlierst hast zu keinen Zugriff mehr auf deine Krypto-Währung, solltest du z.B. dein Passwort vergessen, oder aus irgendwelchen Gründen die Wallet-App neu installieren müssen.\n\nSobald du Deine Wallet eingerichtet hast, kannst du “tez” darin erhalten. Das sind die digitalen Token, mit denen du handelst. Du kannst jetzt entweder ein Konto auf einer Kryptowährungs-Börse wie Coinbase oder Binance einrichten, dann Landeswährung gegen tez eintauschen und diese dann an dich selbst senden, ODER, wenn du jemanden kennst der bereits einige tez hat, dir eine kleine Summe davon schicken/schenken lassen. Die einfachere Option ist sicherlich die Letztere. Einige nette Leute auf Twitter verschicken kostenlos kleine tez Beträge, um dir den Einstieg zu erleichtern, wie z.B. dieser Account hier.\n\n\tNFTs auf hicetnunc.xyz prägen\n\n\n\nWenn du bereit bist, deine erste #CleanNFT zu prägen/minten und mindestens 0,08 tez (Ticker-Symbol: $XTZ) in deiner Wallet hast (das Prägen einer NFT kostet eine geringe Gebühr), kannst du loslegen!\n\nGehe auf hicetnunc.xyz und klicke auf das Dropdown-Symbol (Hamburger Menu) in der oberen rechten Ecke und klicke dann auf “OBJKTs (Mint NFTs)”. OBJKT: das ist der der Name der hic et nunc NFTs. Du wirst dann zu einer neuen Seite weitergeleitet, auf der du einige Details zu deiner NFT ausfüllen solltest:\n\n\n  \n    Einen ulkigen Namen für dein OBJKT\n  \n  \n    Eine kurze Beschreibung der NFT. Unbedingt empfehlenswert ist außerdem, dass du deine Twitter-Handle in dieser Beschreibung hinzufügst. So können potenzielle Käufer die pseudonyme Tezos Adresse deiner Gallerie dir als Ersteller zuordnen.\n  \n  \n    Dann noch einige Tags, die für die NFT relevant sind - die Tags sind noch nicht aktiv, werden aber wahrscheinlich irgendwann in der Zukunft eine Rolle bei der Organisation der Inhalte in deiner Gallerie spielen.\n  \n  \n    Zuletzt musst du noch angeben, wie viele Ausgaben du prägen möchtest. Dies bestimmt die Seltenheit deines NFTs und auch was es kostet, das OBJKT zu prägen. Jede Ausgabe, die du prägst, kostet dich 0,08 tez (rund 0.25€). Das Prägen von drei OBJKT-Ausgaben würde dich also, z.B., 0.24 XTZ, oder derzeit 75 Cent, kosten.\n  \n  \n    Lade das Objekt hoch, das du prägen möchtest.\n  \n  \n    Klicke nun auf die Schaltfläche “Preview”. Es wird dir eine Vorschau deines NFTs gezeigt.\n  \n\n\n\n\n\n  \n    Klicke oben rechts auf ‘Sync’ (Sync aktiviert deine Wallet) und klicke ‘confirm’ in dem Pop-Up deiner Wallet.\n  \n  \n    Falls du nicht schon auf ‘Sync’ geklickt hattest bekommst du jetzt das “Sync” Pop-Up angezeigt. Jetzt kannst du endlich auf ‘mint’ klicken und eine weitere Benachrichtigung von deiner Wallet wird dich nun um confirmation fragen, um die Transaktion durchzuführen. In der oberen rechten Ecke deines Browsers sollte eine Erfolgsmeldung erscheinen oder, alternativ, eine Fehlermeldung, falls etwas schief gelaufen ist. Wenn alles gut gegangen ist, sollte dein NFT nun gepraegt worden sein.\n  \n\n\nVerwalten und Feilbieten deiner Prägungen\n\n\nWarte nach dem Prägen deines OBJKTs ca. eine Minute, klicke dann erneut auf das Dropdown-Menü und dann auf “Manage Assets”. Deine Wallet wird jetzt, wie gewohnt, um Erlaubnis bitten. Es sollte jetzt eine Seite angezeigt werden, die dein OBJKT mit der entsprechenden Nummer enthält (ist dies nicht der Fall, warte eine Weile, bevor du die Seite neu lädst; manchmal funktioniert die Transaktion nicht, und dann kann es sein, dass du von vorne anfagen musst. Und keine Angst, du verlierst deine 0.08 tez nicht). Wenn du nun auf das neue OBJKT klickst, sollte eine Seite angezeigt werden, auf der dein OBJKT mit den zuvor eingegebenen Informationen in seiner ganzen Pracht angezeigt wird.\n\nDein NFT ist nun geprägt, aber du musst es noch zum Kauf anbieten. Klicke nochmals auf ‘Sync’ und einige neue Schaltflächen sollten neben “Info” und “owners” angezeigt werden. Klicke auf die Schaltfläche “+curate” (es kann auch einen anderen Namen wie “swap” haben, jenachdem, wie die Entwickler es nennen). Darunter erscheinen zwei Felder “Objekt amount” und “Price per Objekt (in tez)”. Das erste Feld gibt an, wie viele der geprägten OBJKTs du zur Auktion anbieten möchtest. Wenn Du drei Ausgaben deines OBJKTs geprägt hast, möchtest du möglicherweise zwei davon zum Kauf anbieten und eine für dich selbst behalten. In diesem Fall würdest du “2” in dieses Feld eingeben. Im nächsten Feld gibst du den Preis ein, für den du jede Ausgabe deines OBJKTs verkaufen möchtest. Je nachdem, wieviel Arbeit du in dein OBJKT gesteckt hast, kann dies variieren. Derzeit ist 1 tez rund 4 USD wert, also musst du selbst entscheiden, wie sehr du deine Kunst schätzt. Klicke dann einfach auf “curate” und nach ein paar Minuten sollte dein NFT zum Verkauf bereit sein.\n",
        "url": "/blog/Erste-schritte-mit-Tezos-und-minting-auf-hicetnunc.xyz"
      },
    
      {
        "title": "Hicetnunc.xyz and NFTs on the Tezos Blockchain ~ What's new ~ April 2021 Mega Update",
        "excerpt": "This will be a loaded article, so hold on to your NFTs as we dive into all the recent developments of the past month! Here’s a quick overview, if you’re interested in reading up on something in particular:\n\n",
        "content": "This will be a loaded article, so hold on to your NFTs as we dive into all the recent developments of the past month! Here’s a quick overview, if you’re interested in reading up on something in particular:\n\n\n  UI/UX Changes\n  The Secondary Market Launches\n  HTML/SVG/P5JS/and other upload Templates\n  OBJKT4OBJKT Event\n  Copyminters and Hoarders\n  The hDAO feed\n  A new challenger arrives: Kalamint ~ Punc vs. Boutique\n  Tezos to the moon\n  Pricing your NFTs adequately and the Presstube Method\n  Weekly Livestreams\n  List of Companion sites and NFT reviews\n  Other interesting Articles, Resources and Stuff(s)\n\n\nUI/UX Changes\nSince it’s launch, hicetnunc’s UI has undergone a number of changes and revisions. The overall minting procedure is still pretty much the same as it was before, the biggest change being that there is no need to explicitely ‘sync’ before every action you do on the website. Once you connect your wallet and grant permission it’ll stay synced with your wallet address, and it’ll show it in the top right corner next to the drop down ‘hamburger’ menu. The sync button still exists however, you simply click the drop down  menu in the top right corner, and where it previously showed your wallet address it’ll show an ‘unsync’ button. Click it and it’ll disconnect your current wallet address. ‘unsync’ becomes ‘sync’ and clicking the latter will ask you again to grant permission, now you can choose a different wallet address.\n\n\n\nAnother major change is that you now get to preview your NFT before minting it. This conveniently allows you to check that everything is right before minting.\n\nAdditionally, note that the option for setting the royalties on your mints is now back. Royalties in this context basically mean that you'll get a percentage share of every subsequent sale of your NFTs. You can set this percentage between 10% and 25%.\n\nAfter hitting the preview button, you'll have the option to go back to fix any of the NFT details.\n\n\nIf everything seems alright, then you can hit the 'mint' to finalize the mint.\n\n\nIf you messed up anything, or just want to delete an NFT you've previously created, you now have the option to burn NFTs. Burning essentially means, that you'll send the NFT to a burner address that isn't owned by anyone (This is how I understand it). All of this costs almost nothing due to the cheap Tezos Gas Fees!\n\nIf you're still confused about how to mint NFTs on hicetnunc.xyz then this Video series should clear up all remaining uncertainties:\nCelebrating more than 10K minted objects on @hicetnunc2000 with three video tutorials on how to get started creating #NFTs on the platform🤍Thanks to @presstube for the video tutorials👇🤖 1/ Set up a @tezos wallet with @TempleWallet and apply for some tez w/ @tezosnftfaucet pic.twitter.com/64zGXQCTEQ&mdash; verticalcryptoart (@verticalcrypto) March 23, 2021\n\n\n\nAlternatively you can read up on it in my tutorial here\n\nThe Secondary Market\nYou can now not only collect, but also re-sell previously acquired OBJKTs in your collection! This feature was rolled out quietly throughout the month an had some issues at first. The UI worked in such a manner that if someone were to offer up an NFT for sale that they've collected, while the original creator still had remaining editions of said NFT up for sale, they would essentially supersede the original creator with their offer, since the 'click to collect' button would have to be shared. This was problematic, because if someone were to re-sell 1 edition of an NFT for 100tez, when the original creator still had dozens of the same NFT up for sale at a much lower price, these would then essentially be blocked until someone bought the NFT offered for 100tez.\n\nSome people might not have realized it yet: the secondary market on @hicetnunc2000 is open now.Yes, you can sell any NFT you collected. The only problem is that the UI has not noticed that yet.So if the first number before the &quot;/&quot; is &gt; 0, try clicking &quot;not for sale&quot;. pic.twitter.com/lY9pr6UsvU&mdash; Mario Klingemann (@quasimondo) March 28, 2021\n\n\n\nThis button introduced another problem, that caused a number of users quite the frustration. If an NFT were to sell all of it's remaining editions, the button would show 'not for sale'. This, however, didn't mean that the button was not able to be clicked. \n\nYes, i&#39;ll wait a bit before swapping, I just gave 20tez to someone who took 31 of my early freebies&mdash; Patrick Tresset etc. (@patricktresset) March 28, 2021\n\n\n\nThis has now been fixed by showing all open offers for an NFT in it's collectors tab, with the respective price and the wallet address of the seller.  \n\n\nLessons learned, always check the price befor hitting the confirm button in your wallet!\n\nHTML/SVG/P5JS/and other upload Templates\nWhat first started as html encapsulated in an svg file, has become another avant garde feature of hicetnunc. Data formats such as html, svg, p5js, pdf are now supported by hicetnunc and can be minted as NFTs. This was pioneered by a number of Twitter users in parallel, a super insightiful article by Twitter user @tarwin can be found here.  You can find the respective templates for each supported format here. You'll have to replace certain parts of the templates with your own code, replace the default thumbnail.png / thumbnail.gif with your own and zip all files. This zip file will be what you upload at mint time. Amazing Right?\n\nAnd here's an example of what a minted interactive p5js sketch looks like. Go ahead and hover over the NFT:\n\n\nMaybe the next cool thing could be a convenient and customizable iframe embed code? That could allow creators to display and sell their creations easily from their own website.\n\nOBJKT4OBJKT\nOn the weekend of the 26th of March, in celebration of 10k minted NFTs on hicetnunc, we've seen an event started by Twitter duo @ameliemaiaa and @TaisKoshino that go under the handle @DiverseNftArt, that encouraged users to share NFTs for free under the hastag #OBJKT4OBJKT, such that users on hicetnunc could build up their collections without a cost. Even though the event is officially over, searching the hashtag #OBJKT4OBJKT on Twitter, you'll probably still be able to find some free NFT goodies. It is also very likely that this event will make a return in the future.\n\nTo celebrate 10k #OBJKT mints, @hicetnunc2000 and @DiverseNftArt are promoting a weekend of fun and celebration for all artists and collectors! #cleanNFT #OBJKT4OBJKT #NFTCollector #NFTArt #NFTArtists #cryptoart #lgbtqia #bipoc #diverse #artists #WomenInTech #Tezos #XTZ pic.twitter.com/1iBeju6Ltw&mdash; Diverse NFT Artists 🦄 (@DiverseNftArt) March 24, 2021\n\n\n\n\nCopyminters and Hoarders\nA problem that arose with the OBJKT4OBJKT event was that some individuals would collect multiples of certain free OBJKTs, while not being illegal, it is clearly a dick move. The main purpose being the later resale of the claimed NFTs.\n\nJust realized that one of the guys shamelessly snatching dozens of copies of the free #OBJKT4OBJKT pieces was @sirboomcat aka tz1MHVtpYFsW7VDH1rhbhK3Krad14n6Ww8RD.The hint is his own NFT, https://t.co/pZCSOvGdPg, which he minted for this reply here: https://t.co/UQOmiyxl5o1/2 pic.twitter.com/DsEBrBLSA2&mdash; Django BRRRRiꜩ 🌮 (@djangobits) March 28, 2021\n\n\n\n\nCopyminting is another huge issue, where someone mints an NFT/piece/artwork that is not originally theirs. Some solutions to this problem are being discussed inthis github issue started byt Twitter user @quasimondo. He proposes a community regulated system that revolves around a 'trust' metric, which will be attributed to each wallet address active on the platform. The main point being that new wallet addresses will have to accrue some trust before they can freely mint on hicetnunc. Here's a short excerpt, but I also recommend reading up on it:\n\n\nOne common feature of copyminters is that they usually get caught very quickly already by the volunteers who observe newly minted works and double check those that look suspicious. This means that the offending wallets usually get banned within hours from the platform. This also means that the copyminters have to create a new wallet and start again, with no public \"trust\" in the form of likes or their works sold showing up in trusted collectors' collections.\n\nThis is why I believe that we have to address this problem at the root - which is by preventing those first sales to be successful. A mechanism I have in mind for that is to use an escrow smart contract that acts a proxy for all sales by minters who have no sales history yet and who have not yet built up a network of trust.\n\n\nhDAO and the hDAO feed\nYou might've noticed already that every NFT on hicetnunc has a little circle underneath it, in the lower right corner. The same circle can be found on the NFT page itself, underneath the OBJKT number, and also in the drop down menu. This circle isn't just some aesthetical UI fluff but it can actually be clicked. Clicking it underneath an NFT will trigger your Tezos wallet, clicking it in the hamburger menu takes you to the hDAO feed.\n\n\n\n\nWhen you click the circle underneath an NFT or from it's dedicated page, it'll trigger your wallet which will allow you to spend some of your hDAO tokens on the NFT. I'm not entirely sure what the tokens are or how they work, but once spent they essentially work as an upvote for the NFT. If someone knowledgeable would like to chime in on this, be my guest!\n\n\n\nI’m not certain how many people are aware of the hDAO as of now, or if they’re actually using it to search for potential purchases. This also brings up the issue of creators upvoting their own creations with their hDAO tokens, esentially boosting and skewing the rankings in their favor (if/when the hDAO feed becomes a more integral part of hicetnunc).\n\nSo what exactly are hDAO tokens on hicetnunc? What can I do with them (other than upvoting NFTs) and why do get some whenever I make a transaction on the website? Explain like I&#39;m 5 #Tezos $XTZ #hicetnunc #CleanNFT&mdash; Gorilla.sun (@gorillasu) April 15, 2021\n\n\n\n\nA new challenger arrives: Kalamint ~ Punc vs. Boutique\nKalamint was officially announced on the 19th of December as the 'first NFT marketplace on Tezos', and was scheduled for a release in January 2021. This release was then delayed to the 18th of February, which was delayed again due to some UI problems and Kalamint didn't launch until the 23rd of March. At this point it might be a little bit silly to still call it the 'first NFT platform for Tezos', when hicetnunc had already been up and running for more than a month. Not complaining though, the more the merrier, and maybe this competition will drive both platforms to keep improving.\n\nKalamint is vastly differently from hicetnunc, being described as a boutique NFT store vs. the spartanic hicetnunc (as described by some members of the community). One thing that I actually like about Kalamint is that they verify the creators before allowing them to mint and list NFTs, this somewhat circumvents the copyminting issue but could also be regarded as gatekeeping, as they have full control of what is being minted on their platform. But maybe they're intended to cater to different audiences, hicetnunc being much more accessible to people who just want to dip their toes into the Tezos NFT waters. \n\nIn other news, Opensea has also announced the support of Tezos NFTs, however there hasn't been a clear ETA. Speculatively later this month or early next month. Meanwhile, other NFT platforms are being developed such as tezauction, BazaarNFTs and DAuctionHouse, which are worth checking out. It's extremely interesting to see what the Tezos NFT landscape will look like in the next couple of months.\n\nGive it 1 - 2 months and 2 or 3 other #NFT marketplaces should be live on #Tezos. Check out @BazaarNfts, @tezauction and @DAuctionHouse&mdash; Allen Walters (@IgnoranceIt) April 14, 2021 \n\nTezos to the Moon\nThe NFT activity on the Tezos blockchain has catapulted the number of contract calls, surpassing previous all-time highs:\nTezos contract calls / April 12 from r/tezos\n\n\n\nHicetnunc is also still growing at a very fast rate, as of writing this post we've already surpassed 30k minted NFTs. Twitter user @Esclaponr shows some stats he has aggregated regarding the growth and activity on hicetnunc:\n\nLargest spike in new users on @hicetnunc2000 since I started collecting some data about the smart contract usage two days ago pic.twitter.com/jQVBEmqh8h&mdash; Ricky Esclapon (@Esclaponr) March 25, 2021 \n\n\nUp to date graphs can be found in this repo here. Alternatively you can also purchase these live updating graphs as NFTs here if you'd like to support @Esclaponr. It's safe to say that the Tezos ecosystem is brimming with life more than it ever has before.\n\nPricing things adequately and the 'Presstube' method\nIt's still not very clear to creators how to number editions and price their NFTs adequately, and what combinations thereof will help them maximising sales. After experimenting, some hicetnunc users have come up with creative strategies for selling their NFTs, one of them being the 'Presstube' method.\n\nI didn’t coin it so it’s marginally embarrassing every time I see it called that 😝 but...The practice of pricing editions so that they begin accessible (even sometimes free) and then the price steps up as editions sellJury’s still out on whether it’s a good idea though! Ymmv&mdash; James Paterson (@presstube) April 4, 2021 \n\n\nThe 'Presstube' method is essentially a specific way of pricing NFTs on hicetnunc, which rewards the early birds that swoop in and cop the first couple of editions of a freshly minted NFT. It's possible due to how the hicetnunc UI works. When you mint an NFT on hicetnunc, it appears in the feed and your creations tab, however it is not immediately up for sale. You still have to specify how many editions you want put up for sale. In that manner, you can sell different amounts for different prices.\n\nWeekly Livestreams\nThere also have been regular livestreams and 'campfire chats' between involved members of the community hosted on @verticalcrypto, which are fun to watch if you'd like to get to know the people active on hicetnunc:\n\nDecided to frame and mint part of @hicetnunc2000 history: the first Hicetnunc &amp; friends livestream 🤍featuring: @crzypatchwork , @quasimondo , @presstube @theAngieTaylor , @NeuralBricolage , @JoanieLemercier 20 editions here:https://t.co/mmm5yUSH62#NFT #hicetnunc #Tezos pic.twitter.com/DMM8tiMWI9&mdash; verticalcryptoart (@verticalcrypto) April 12, 2021 \n\nCompanion sites and art reviews\nCompanion Sites\n\nTile Grid of OBJKTs based on visual similarity:  https://here-or-there.glitch.me/ \nLive Feed of transactions on hicetnunc:  https://objkts.xyz/  \nTag Discovery Tool:  https://projects.stroep.nl/hicetnunc/#discover  \n\nNFT Art Reviews\n\nPop twig: a zine devoted to aiding the discovery of art on hic et nunc \nArtnome:  hic et nunc revives the true spirit of web art through nfts \nVerticalCrypto\n\n\nShoot me a message for additions to these lists, I know I missed a lot!\n\nOther Interesting Articles, Resources and Stuff(s)\n\nHow to host your own IPFS node\nAdd your personal info to your hicetnunc profile\nNot another jpeg\nWhy would anyone buy crypto art let alone spend millions on what's essentially a link to a jpeg\n\n\nIf you've reached this far, thanks for reading! Leave a comment if there's any typos or if I missed anything!\n\n",
        "url": "/blog/Hicetnunc.xyz-and-NFTs-on-the-Tezos-Blockchain-~-What's-new-~-April-2021-Update"
      },
    
      {
        "title": "Rotation and Circular Positioning",
        "excerpt": "\n\n",
        "content": "\n\nRotating and positioning elements along the circumference of a circle\nSo far, in most of my blog posts we've been dealing with arrangement of elements on a grid, however, creating circular motion should be another weapon in your creative coding arsenal. This light blog post explains how to achieve it in P5JS in a number of different ways. Starting with the simplest form: rotating a point around a circle.\n\nTo create a rotating point, we usually need 3 parameters: the center of the circle around which we are rotating, the radius, and the angle. To make this point actually move around the circle, the parameter for the angle needs to be a linearly increasing parameter, which, as always, is time in form of the millis() function. The snippet of code that follows the comment defines the rotating point:\n\nfunction setup() {\n  createCanvas(400, 400);\n  centerX = width/2\n  centerY = height/2\n  radius = 100\n}\n\nfunction draw() {\n  background(220);\n  stroke(0)\n  point(centerX, centerY)\n  strokeWeight(10)\n  stroke(255,0,0)\n  // for what follows simply replace this with the provided snippet\n  point(\n        centerX + radius * cos(millis()/1000),\n    centerY + radius * sin(millis()/1000)\n  )   \n  // end of what you should replace\n}\n\n\nThe coordinates of the rotating point are defined in terms of sin() and cos(), plugging time into the two functions representing the angle(divided by some arbitrary value to slow down the animation), the visualization that we obtain looks like this:\n\n\n\n\nNow, If you're not very familiar with sine and cosine I recommend reading up on them in one of my previous blog posts that explains them in a little more detail here. In simple terms, all you need to know is that given a center point and a radius, you can draw a point on the circle (defined by this center and radius) using the sine and cosine functions for a specific angle.\n// ----\npoint(centerX + radius * cos(0), centerX + radius * sin(0))\n  point(centerX + radius * cos(HALF_PI), centerX + radius * sin(HALF_PI))\n  point(centerX + radius * cos(PI), centerX + radius * sin(PI))\n  point(centerX + radius * cos(PI+QUARTER_PI), centerX + radius * sin(PI+QUARTER_PI))\n\n\n\n\n\nIntuition and Math behind rotational\nYou might ask now for a more detailed definition of sin() and cosine(), and how they allow you to find points on a circle. Essentially it has something to do with triangles, angles and ratios. First we should look at the definition of sine as a trigonometric function:\n\nSine: The trigonometric function that is equal to the ratio of the side opposite a given angle (in a right-angled triangle) to the hypotenuse.\n\nIn this case we already have the angle (we simply choose one, depending where we want to position the point on the circle), and the hypotenuse (the radius), which will allow us to find the opposite side. Since we're dealing with ratios here, we still need to multiply by the radius, to find the exact position and add an offset, which is the center of the circle. This gives us one of the coordinates for our point, we repeat the same thing for the cosine. Putting them together will allow us to rotate a point around a circle. \n  \n\nTo explain it in another way, we're calculating the vertical offset from the horizontal line that cuts the circle in two parts, as well as the horizontal offset from the vertical line that cuts the circle in two equal parts, and draw a point at these coordinates. This animation from wikipedia was too compelling not to include, as it perfectly exemplifies what is going on:\n\n\n \nGreat, now you might be either satisfied that you can position something on a circle, OR you might be more confused and still curious as to how we found out that we can do such positioning with sine and cosine. I'd like to include this excerpt from Robert Cruikshank's Quora Answer:\n\n\nAlways remember: mathematics is part discovery, part invention, and part convention.\n\nGiven the Pythagorean theorem and the definition of a circle, one can discover (and prove) that the ratio of circumference to diameter is π.\n\nThe definition of cosine and sine for arbitrary angles is just that—a definition, an invention. We chose it that way because it is useful. Likewise, I always get school kids arguing with me that 1^0 should be 0, not 1. I explain to them that they CAN define 1^0 to be 0, it’s just that the math they get will be less streamlined, more clunky, the rules for exponents will have exceptions, etc.\n\n\nIf all of this is still hazy, then I recommend playing around with sin() and cos() to internalize their behaviour, soon enough you'll have an intuitive understanding, and when you do, I recommend approaching the math behind it again and I promise that it will feel much easier. \n\nApplications\nThis is kind of the basis for a lot of other things that you can do. For example, what would you have to do to have a 3rd point rotate around the already rotating point? The snippet I provided already has the answer to it!\n\n//--------\n  point(\n        centerX + radius * sin(millis()/1000),\n    centerY + radius * cos(millis()/1000)\n  )\n  stroke(255,0,255)\n  point(\n        centerX + radius * sin(millis()/1000) + radius/2 * sin(millis()/500),\n    centerY + radius * cos(millis()/1000) + radius/2 * cos(millis()/500)\n  )\n\n\n\nYou need to be mindful about the speed of the new point, here I'm dividing the new point's time by 500. If both were in sync we wouldn't observe an additional orbiting motion. Very simple, yet very powerful!\n\nPositioning items around a circle\n\nLet's go back a little and see how to position an arbitrary number of points around a circle in an equidistant manner. The circumference of a full circle can be expressed in either 2xPI RADIANS or 360 Degrees. Positioning an arbitrary number of points around a circle requires splitting 2xPI evenly among them.\n\nnumPoints = 5\n  for (i = 0; i &lt; numPoints; i++) {\n    point(\n      centerX + radius * sin(2 * PI / numPoints * i + millis() / 1000),\n      centerY + radius * cos(2 * PI / numPoints * i + millis() / 1000)\n    )\n  }\n\n\n\nIn this manner we simply divide 2xPI by the number of points and multiply by the number of the current point. If you prefer doing this in degrees, P5JS has a function that allows you to set this. This concept also applies if you want to position certain elements along the arc of a circle, for example fanning out a number of lines:\n\n// ------\nstrokeWeight(2)\nfor(i = 0; i &lt; 20; i++){\n    line(centerX,centerY,\n        centerX+100*sin(HALF_PI+HALF_PI/20*i),\n         centerY+100*cos(HALF_PI+HALF_PI/20*i))\n  }\n\n\n\n\nAs you can see P5JS also conveniently provides pre-defined constant that define different portions of PI (QUARTER_PI, HALF_PI, PI and TWO_PI).\n\nRotation in the WEBGL mode\n\nAlternatively, you could simply achieve rotation by using the WEBGL mode that provides a conveninent rotate function. This is quite fun and very easy, but allows you to create incredible cool sketches. I'm only going to brush briefly over 3D rotation, and is a topic that requires much more exploration in future blog posts. I'll showcase a simple sketch, that looks very impressive:\n\n\nfunction setup() {\n  createCanvas(500, 500, WEBGL);\n}\n\nfunction draw() {\n  noFill();\n  background(255);\n  orbitControl();\n  stroke(0);\n  strokeWeight(1)\n\n  for(x = 0; x&lt;3; x++){\n    rotateY(millis() / 4000 + 0.1*sin(millis()/10000));\n    rotateX(millis() / 4000);\n    torus(160-x*60, 1, 3,3);\n  }\n  rotateZ(millis() / 8000);\n  sphere(8)\n  translate(-25,45,0)\n  sphere(2)\n  translate(0,-90,0)\n  sphere(2)\n  translate(75,45,0)\n  sphere(2)\n}\n\n\n\n\n\n\n\n\n\n",
        "url": "/blog/Rotation-along-the-circumference-of-a-circle"
      },
    
      {
        "title": "Dashed Lines in P5JS",
        "excerpt": "\n\n",
        "content": "\n\nOkay, so this is a long one. Drawing dashed lines in P5 from scratch and animating them was a tough one, but I’m super happy with my results and stoked to share the code in this post, especially with the insights I’ve gained from writing this code. I highly recommend attempting to make what you see above from scratch on your own, and then come back when you hit a roadblock, otherwise enjoy the post! Let’s go:\n\n\n  Dashed lines with the drawingcontext\n  Drawing a line between two coordinates\n  Adding the dashed line style\n  Fixing the final protruding dash\n  Code for static dashed lines\n  Pumping forward animation\n  Cleaning up the animation\n  Final code for animation\n  Reverse Speed\n\n\nDashed lines with the drawingcontext\nDrawing a line in P5JS is very easy and can be done with a single line of code. You simply need to know the coordinates of the starting point and the end point:\n\nline(0,0,100,100)\n\n\nDrawing a dashed line in P5JS is also relatively easy, however requires you to invoke the ‘drawingContext’ as pointed out in this Github issue:\ndrawingContext.setLineDash([5, 15]);\nline(0,0,100,100)\n\n\nThe setLineDash() function receives an array of two parameters which specify the length of the dashes that will make up your line and the spacing in between these dashes. If you simply want to draw dashed or dotted lines this might be sufficient for you. However I wanted a little more comlpex behaviour from my lines.\n\nDrawing a line between two points\n\nDrawing custom dashed lines from scratch, that have an animated behaviour, requires quite a little bit of code. What follows is my attempt at making animated dashed lines in P5JS, but is no way the optimal approach to doing so. As usual, we will heavily rely on Object Oriented programming by modeling the dashed line as a class and giving it behaviour through functions and member variables. First order of business will be drawing a line manually between two sets of coordinates. This involves finding the angle that the line forms with the x axis, which can be done with the atan2() function:\n\n// angle formed by the line going from point (x1,y1) to point (x2,y2) \n// and the positive x-axis at the coordinate origin\nslope = atan2(y2 - y1, x2 - x1)\n\n\nThe atan2() function is super useful in many scenarios as it gives you the angle formed by a line and the x-axis, here we use it to find the angle of the line which we require to correctly slant the line that we will draw. Additionally, we will also require the length of the segment between the two points, the formula for that is:\n// length of line going from point (x1, y1) to point (x2, y2)\nL = sqrt(pow((x1 - x2), 2) + pow((y1 - y2), 2));\n\n\nThe result given by atan2 defines the angle of inclination of our line, which we will rotate by that angle. Essentially, we will center a circle on the point (x1, y1) with a radius equal to the length of the line (which we just calculated) and use the angle with sin() and cos() to slant the line. If you haven’t already done so, go and read my post that explains rotation in detail here.\n\nSo far our class will look like this:\nclass SlopeLine {\n  constructor(x1, y1, x2, y2, segmentLength, spaceLength) {\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n    this.segmentLength = segmentLength;\n    this.spaceLength = spaceLength;\n\n    this.L = sqrt(\n      pow((this.x1 - this.x2), 2) +\n      pow((this.y1 - this.y2), 2));\n\n    this.S = atan2(this.y2 - this.y1, this.x2 - this.x1)\n  }\n\n  display() {\n    line(this.x1, this.y1,\n      this.x1 + this.L * cos(this.S),\n      this.y1 + this.L * sin(this.S))\n  }\n}\n\nfunction setup() {\n  createCanvas(400, 400);\n  sl = new SlopeLine(200, 200, 300, 200);\n}\n\nfunction draw() {\n  background(220);\n  sl.display();\n}\n\n\nNot very impressive yet, because it’s essentially just doing the same thing that you could do with the line() function. Nonetheless, it involves some very important calculations that are useful for many scenarios.\n\nAdding the dashed line style\nNow we’ll tackle the main problem, achieving the dashed line style. Similarly to invoking the drawingContext, we want to be able to freely set the dash length as well as the  length of the gaps between dashes. We’ve already calculated the length of our line, next we’ll have to calculate how many segments we can fit into it:\nnumSegments = L / (segmentLength + spacing);\n\nWe simply divide the overall length of the line by the combined length of a dash and a gap. This calculation will not always give us a round number, and at this point we encounter our first problem, how do we split up a segment of fixed length into a number of sub-segments, whose combined length might not exactly add up to the total length of the entire segment?\n\nIn actuality, we have to consider two cases, the segment and space length either add up exactly n times to fill out the segment, or they don’t. If they do add up, great! Otherwise, we’ll have to write some code to handle that case.\n\nLet’s first have a look at what it looks like without handling that case:\nclass SlopeLine {\n  constructor(x1, y1, x2, y2, segmentLength, spaceLength) {\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n    this.segmentLength = segmentLength;\n    this.spaceLength = spaceLength;\n\n    // Calculate length\n    this.L = sqrt(\n      pow((this.x1 - this.x2), 2) +\n      pow((this.y1 - this.y2), 2));\n\n    // calculate angle\n    this.S = atan2(this.y2 - this.y1, this.x2 - this.x1)\n    \n    // calculate number of segments\n    this.numS = this.L / (this.segmentLength+this.spaceLength)\n    console.log(this.numS)\n  }\n\n  display() {\n     for(let i = 0; i &lt; this.numS; i++){\n       console.log(i)\n       line(\n         this.x1 + (this.segmentLength + this.spaceLength)*i*cos(this.S),\n         this.y1 + (this.segmentLength + this.spaceLength)*i*sin(this.S),\n         this.x1 + (this.segmentLength+ this.spaceLength)*(i+1)*cos(this.S)-this.spaceLength*cos(this.S),\n         this.y1 + (this.segmentLength+ this.spaceLength)*(i+1)*sin(this.S)-this.spaceLength*sin(this.S),\n           )\n     }\n  }\n}\n\nfunction setup() {\n  createCanvas(400, 400);\n  \n  sls = [];\n  for(i = 0; i &lt; 20; i++){\n    sls.push(new SlopeLine(100, 100+10*i, 300, 100+10*i, random(1,35),random(1,35)));\n  }\n}\n\nfunction draw() {\n  background(220);\n\n  for(i = 0; i &lt; 20; i++){\n    stroke(0)\n    strokeWeight(3);\n    sls[i].display();\n  \n    // Additionally  we're gonna draw two red points to see where the line should start and end\n    strokeWeight(5);\n    stroke(255,0,0)\n    point(100,100+i*10);\n    point(300,100+i*10);\n  }\n}\n\n\n\n\nHere we’re actually drawing a couple of lines with the dash length and in-between spacing randomized. The red points show where the line starts and where it should end. You can see that in some cases the last dash protrudes further than the second red dot. My OCD thinks that this looks very bad and that this needs to be fixed. Let’s also seee what it looks like if we spread these lines on an arc or around a circle:\n\nfunction setup() {\n  createCanvas(400, 400);\n  \n  sls = [];\n  radius = 50;\n  for(i = 0; i &lt; 20; i++){\n    sls.push(new SlopeLine(200+radius*cos(TWO_PI/20*i),\n                           200+radius*sin(TWO_PI/20*i),\n                           200+radius*cos(TWO_PI/20*i)*2,\n                           200+radius*sin(TWO_PI/20*i)*2, \n                           random(1,35),\n             random(1,35)));\n  }\n}\n\nfunction draw() {\n  background(220);\n\n  for(i = 0; i &lt; 20; i++){\n    stroke(0)\n    strokeWeight(3);\n    sls[i].display();\n  \n    // Additionally  we're gonna draw two red points to see where the line should start and end\n    strokeWeight(5);\n    stroke(255,0,0)\n    point(200+radius*cos(TWO_PI/20*i),\n                           200+radius*sin(TWO_PI/20*i));\n    point(200+radius*cos(TWO_PI/20*i)*2,\n                           200+radius*sin(TWO_PI/20*i)*2);\n  }\n}\n\n\n\n\nFixing the final protruding dash\nThis was genuinely… chllenging, to fix. A first thought was to simply check if the length of n * (segment length + space length) exceeds the length of the segment, and then discard the last dash. But that turned out to be quite ugly as well, as you can see here:\n\n\n\nWe’ll have to make a check just for the last dash, this can be done by finding the total length of all segments and spaces:\n\nvar check = sqrt(\n      pow((this.segmentLength + this.spaceLength)*(int(this.numS)+1)*sin(this.S)-this.spaceLength*sin(this.S), 2 ) \n      + pow((this.segmentLength + this.spaceLength)*(int(this.numS)+1)*cos(this.S)-this.spaceLength*cos(this.S), 2)\n    )\n\nNotice that we’re casting ‘this.numS’ to an integer, this was maybe the one thing that I was stuck on for a while. We’re casting to an integer to be able to draw an exact number of segments and spaces. We’re also adding 1 to the number of segments because we’re stopping the previous for loop at ‘this.numS-1’. Then we also subtract one length of a spacing, since we only care about where the dash ends, not where the dash and it’s following space end. If we now draw a green point at this position, we obtain:\n\n\nstroke(0,255,0)\n      strokeWeight(5)\n      point(this.x1 +\n        (this.segmentLength+ this.spaceLength)*\n        (int(this.numS)+1)*cos(this.S)-\n        this.spaceLength*cos(this.S),\n        \n         this.y1+(this.segmentLength + this.spaceLength)*\n        (int(this.numS)+1)*sin(this.S)-\n        this.spaceLength*sin(this.S)\n      )\n\n\n\n\nNext we just need to check if the length of the last dash exceeds the total length of the line or not, and draw the lines accordingly:\nstroke(255,255,0)\nstrokeWeight(3)\nif(check&lt;this.L){\n  line(\n     this.x1 + (this.segmentLength + this.spaceLength)*(int(this.numS))*cos(this.S),\n     this.y1 + (this.segmentLength + this.spaceLength)*(int(this.numS))*sin(this.S),\n     this.x1 + (this.segmentLength+ this.spaceLength)*((int(this.numS))+1)*cos(this.S)-this.spaceLength*cos(this.S),\n     this.y1 + (this.segmentLength+ this.spaceLength)*((int(this.numS))+1)*sin(this.S)-this.spaceLength*sin(this.S)\n       )\n}else if(check&gt;this.L){\n  line(\n     this.x1 + (this.segmentLength + this.spaceLength)*(int(this.numS))*cos(this.S),\n     this.y1 + (this.segmentLength + this.spaceLength)*(int(this.numS))*sin(this.S),\n     this.x2,\n     this.y2\n  )\n}\n\nHere you can see in yellow the final dash segments and the green point indicates where the segment would have ended otherwise. Is this the best solution? I don’t know, but it works:\n\n\nCode for static dashed lines\nIf we combine everything we have so far, our class will look like this:\nclass DashLine {\n  constructor(x1, y1, x2, y2, segmentLength, spaceLength) {\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n    this.segmentLength = segmentLength;\n    this.spaceLength = spaceLength;\n\n    // Calculate length\n    this.L = sqrt(\n      pow((this.x1 - this.x2), 2) +\n      pow((this.y1 - this.y2), 2));\n    console.log(this.L)\n\n    // calculate angle\n    this.S = atan2(this.y2 - this.y1, this.x2 - this.x1)\n    \n    // calculate number of segments\n    this.numS = this.L / (this.segmentLength+this.spaceLength)\n    console.log(this.numS)\n    \n    // calculate length of tail\n    this.tailL = this.L % (this.segmentLength+this.spaceLength)\n  }\n\n  display() {\n     for(let i = 0; i &lt; this.numS-1; i++){\n       //console.log(i)\n       line(\n         this.x1 + (this.segmentLength + this.spaceLength)*i*cos(this.S),\n         this.y1 + (this.segmentLength + this.spaceLength)*i*sin(this.S),\n         this.x1 + (this.segmentLength+ this.spaceLength)*(i+1)*cos(this.S)-this.spaceLength*cos(this.S),\n         this.y1 + (this.segmentLength+ this.spaceLength)*(i+1)*sin(this.S)-this.spaceLength*sin(this.S)\n           )\n     }\n    \n    var check = sqrt(\n      pow((this.segmentLength + this.spaceLength)*(int(this.numS)+1)*sin(this.S)-this.spaceLength*sin(this.S), 2 ) \n      + pow((this.segmentLength + this.spaceLength)*(int(this.numS)+1)*cos(this.S)-this.spaceLength*cos(this.S),2)\n    )\n    \n    stroke(0,255,0)\n      strokeWeight(5)\n      point(this.x1 +\n        (this.segmentLength+ this.spaceLength)*\n        (int(this.numS)+1)*cos(this.S)-\n        this.spaceLength*cos(this.S),\n        \n         this.y1+(this.segmentLength + this.spaceLength)*\n        (int(this.numS)+1)*sin(this.S)-\n        this.spaceLength*sin(this.S)\n      )\n    \n    stroke(255,255,0)\n      strokeWeight(3)\n    if(check&lt;this.L){\n      line(\n         this.x1 + (this.segmentLength + this.spaceLength)*(int(this.numS))*cos(this.S),\n         this.y1 + (this.segmentLength + this.spaceLength)*(int(this.numS))*sin(this.S),\n         this.x1 + (this.segmentLength+ this.spaceLength)*((int(this.numS))+1)*cos(this.S)-this.spaceLength*cos(this.S),\n         this.y1 + (this.segmentLength+ this.spaceLength)*((int(this.numS))+1)*sin(this.S)-this.spaceLength*sin(this.S)\n           )\n    }else if(check&gt;=this.L){\n      line(\n         this.x1 + (this.segmentLength + this.spaceLength)*(int(this.numS))*cos(this.S),\n         this.y1 + (this.segmentLength + this.spaceLength)*(int(this.numS))*sin(this.S),\n         this.x2,\n         this.y2\n           )\n     }\n  }\n}\n\nfunction setup() {\n  createCanvas(400, 400);\n  \n  dls = [];\n  for(i = 0; i &lt; 20; i++){\n    dls.push(new DashLine(100, 100+10*i, 300, 100+10*i, random(1,35),random(1,35)));\n  }\n}\n\nfunction draw() {\n  background(220);\n\n  for(i = 0; i &lt; 20; i++){\n    stroke(0)\n    strokeWeight(3);\n    dls[i].display();\n  \n    // Additionally  we're gonna draw two red points to see where the line should start and end\n    strokeWeight(5);\n    stroke(255,0,0)\n    point(100,100+i*10);\n    point(300,100+i*10);\n  }\n}\n\n\nThis works, and it even works for any numbers that you give as parameters for segment length and spacing length. Except for negative numbers, which don’t make sense to begin with and can be checked for in the constructor.\n\nPumping forward animation\n\n\nNext we’ll want to look into conveying motion with the dashes, which is a little tricky but actually easier than you might think. We want them to flow from the start of the line towards the end, where they seemingly disappear and reappear at the beginning of the line. Since we already wrote solid code, it won’t take many modifications to achieve this effect. First, we’ll have to create a parameter called ‘this.beginningLength’, which stores the amount of displacement from the intial point. The class now becomes:\n\nclass AnimatedLine {\n  constructor(x1, y1, x2, y2, segmentLength, spaceLength) {\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n    this.segmentLength = segmentLength;\n    this.spaceLength = spaceLength;\n\n    // Calculate length\n    this.L = sqrt(\n      pow((this.x1 - this.x2), 2) +\n      pow((this.y1 - this.y2), 2));\n    console.log(this.L)\n\n    // Calculate angle\n    this.S = atan2(this.y2 - this.y1, this.x2 - this.x1)\n    \n    // Calculate number of segments\n    this.numS = this.L / (this.segmentLength+this.spaceLength)\n    console.log(this.numS)\n  \n    this.beginningLength = 0;\n  }\n  \n  move(rate){\n    this.beginningLength += rate\n    if(this.beginningLength&gt;this.segmentLength+this.spaceLength){\n      this.beginningLength = 0;\n    }\n  }\n  \n  display() {\n     for(let i = 0; i &lt; this.numS; i++){\n       line(\n         this.x1 + (this.segmentLength + this.spaceLength)*i*cos(this.S) \n            + this.beginningLength*cos(this.S),\n         this.y1 + (this.segmentLength + this.spaceLength)*i*sin(this.S) \n            + this.beginningLength*sin(this.S),\n         this.x1 + (this.segmentLength+ this.spaceLength)*(i+1)*cos(this.S)\n            -this.spaceLength*cos(this.S) + this.beginningLength*cos(this.S),\n         this.y1 + (this.segmentLength+ this.spaceLength)*(i+1)*sin(this.S)\n            -this.spaceLength*sin(this.S) + this.beginningLength*sin(this.S)\n           )\n     }\n    \n    var check = sqrt(\n      pow((this.segmentLength + this.spaceLength)*(int(this.numS)+1)*sin(this.S)\n          -this.spaceLength*sin(this.S)+ this.beginningLength*sin(this.S), 2) \n      + pow((this.segmentLength + this.spaceLength)*(int(this.numS)+1)*cos(this.S)\n      +   -this.spaceLength*cos(this.S)+ this.beginningLength*cos(this.S), 2)\n    )\n  }\n}\n\nfunction setup() {\n  createCanvas(400, 400);\n  \n  als = [];\n  for(i = 0; i &lt; 20; i++){\n    als.push(new AnimatedLine(100, 100+10*i, 300, 100+10*i, random(1,35),random(1,35)));\n  }\n}\n\nfunction draw() {\n  background(220);\n\n  for(i = 0; i &lt; 20; i++){\n    stroke(0)\n    strokeWeight(3);\n    als[i].display();\n    als[i].move(0.2)\n  \n    // Additionally  we're gonna draw two red points to see where the line should start and end\n    strokeWeight(5);\n    stroke(255,0,0)\n    point(100,100+i*10);\n    point(300,100+i*10);\n  }\n}\n\n\nAnd we end up with something similar to this:\n\n\nThe most important new addition is the move() function, which displaces the beginningLength parameter, which is what’s pushing forward the dashed line. Once the beginningLength parameter is larger or equal to the length of a dash and a gap we reset it. The beginningLength parameter will be included in the calculation of the position of each dash.\n\nWatching this go on for a little while, you can see how unsatisfying it is to see the first dash of each line pop up out of seemingly nowhere, and equivalently we again have a problem of a protruding final dash.\n\nCleaning up the animation\n\nWe need to draw the line that goes from the first red point to the beginning of the space preceding the first dash. This simulates as if the dashed line is continuously appearing from the left side, and already makes the animation look much less jumpy:\n// Add this to beginning of display function\nif(this.beginningLength &gt; this.spaceLength){\n       stroke(255,0,255)\n       line(this.x1, this.y1,\n       this.x1 + (this.beginningLength-this.spaceLength)*cos(this.S),\n       this.y1+ (this.beginningLength-this.spaceLength)*sin(this.S)\n           )\n     }\n\nNow we have something that looks like this:\n\n\nNow to the truncation of the newly protruding last dash. One step towards a solution will be checking if any of the drawn dashes exceed the total length of our line, if they do, we simply don’t draw them:\n\n\nclass AnimatedLine {\n  constructor(x1, y1, x2, y2, segmentLength, spaceLength) {\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n    this.segmentLength = segmentLength;\n    this.spaceLength = spaceLength;\n\n    // Calculate length\n    this.L = sqrt(\n      pow((this.x1 - this.x2), 2) +\n      pow((this.y1 - this.y2), 2));\n    console.log(this.L)\n\n    // calculate angle\n    this.S = atan2(this.y2 - this.y1, this.x2 - this.x1)\n\n    // calculate number of segments\n    this.numS = this.L / (this.segmentLength + this.spaceLength)\n\n    // calculate length of tail\n    this.tailL = this.L % (this.segmentLength + this.spaceLength)\n\n    this.beginningLength = 0;\n    this.tailLength = this.tailL;\n    this.difference = (this.segmentLength + this.spaceLength)\n\n  }\n\n  move(rate) {\n    this.beginningLength += rate\n    if (this.beginningLength &gt;= this.segmentLength + this.spaceLength) {\n      this.beginningLength = 0;\n    }\n    \n    this.difference = (this.segmentLength + this.spaceLength)-this.beginningLength\n  }\n\n\n  display() {\n    if (this.beginningLength &gt; this.spaceLength) {\n      stroke(255, 0, 255)\n      line(this.x1, this.y1, \n           this.x1 + (this.beginningLength - this.spaceLength) * cos(this.S), \n           this.y1 + (this.beginningLength - this.spaceLength) * sin(this.S))\n    }\n\n    stroke(0)\n    for (let i = 0; i &lt; this.numS; i++) {\n      \n      // check if dash segment exceeds total line length\n      var distCheck = sqrt(\n        pow((this.segmentLength + this.spaceLength) * (i + 1) \n            * cos(this.S) - this.spaceLength * cos(this.S) \n            + this.beginningLength * cos(this.S), 2) \n        + pow((this.segmentLength + this.spaceLength) * (i + 1) \n              * sin(this.S) - this.spaceLength * sin(this.S) \n              + this.beginningLength * sin(this.S), 2)\n      )\n\n      // if it does, we simply don't draw it\n      if (distCheck &lt;= this.L) {\n        line(\n          this.x1 + (this.segmentLength + this.spaceLength) * i \n              * cos(this.S) + this.beginningLength * cos(this.S),\n          this.y1 + (this.segmentLength + this.spaceLength) * i \n              * sin(this.S) + this.beginningLength * sin(this.S),\n          this.x1 + (this.segmentLength + this.spaceLength) * (i + 1) \n              * cos(this.S) - this.spaceLength * cos(this.S) \n              + this.beginningLength * cos(this.S),\n          this.y1 + (this.segmentLength + this.spaceLength) * (i + 1) \n              * sin(this.S) - this.spaceLength * sin(this.S) \n              + this.beginningLength * sin(this.S)\n        )\n      }\n    }\n  }\n}\n\nfunction setup() {\n  createCanvas(400, 400);\n\n  als = [];\n  for (i = 0; i &lt; 20; i++) {\n    als.push(new AnimatedLine(100, 100 + 10 * i, 300, 100 + 10 * i, random(1, 35), random(1, 35)));\n  }\n}\n\nfunction draw() {\n  background(220);\n\n  for (i = 0; i &lt; 20; i++) {\n    stroke(0)\n    strokeWeight(3);\n    als[i].display();\n    als[i].move(0.2)\n\n    strokeWeight(5);\n    stroke(255, 0, 0)\n    point(100, 100 + i * 10);\n    point(300, 100 + i * 10);\n  }\n}\n\n\nAnd we end up with this:\n\nNow the protruding dash doesn’t appear anymorer but we have a weird behaviour where the last dash simply disappears. We don’t want that, we can fix it with an additional check and mirroring the beginningLength dash, since their lengths are proportional.\n\nFinal code for animation\n\nAnd the final code goes here:\nclass AnimatedLine {\n  constructor(x1, y1, x2, y2, segmentLength, spaceLength) {\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n    this.segmentLength = segmentLength;\n    this.spaceLength = spaceLength;\n\n    // Calculate length\n    this.L = sqrt(\n      pow((this.x1 - this.x2), 2) +\n      pow((this.y1 - this.y2), 2));\n    console.log(this.L)\n\n    // calculate angle\n    this.S = atan2(this.y2 - this.y1, this.x2 - this.x1)\n\n    // calculate number of segments\n    this.numS = this.L / (this.segmentLength + this.spaceLength)\n\n    this.beginningLength = 0;\n  }\n\n  move(rate) {\n    this.beginningLength += rate\n    if (this.beginningLength &gt;= this.segmentLength + this.spaceLength) {\n      this.beginningLength = 0;\n    }\n  }\n\n\n  display() {\n    if (this.beginningLength &gt; this.spaceLength) {\n      stroke(255, 0, 255)\n      line(this.x1, \n           this.y1, \n           this.x1 + (this.beginningLength - this.spaceLength) * cos(this.S), \n           this.y1 + (this.beginningLength - this.spaceLength) * sin(this.S)\n          )      \n    }\n  \n    for (let i = 0; i &lt; this.numS; i++) {\n      stroke(0)\n      var distCheck = sqrt(\n        pow(\n          (this.segmentLength + this.spaceLength) * (i + 1) \n          * cos(this.S) - this.spaceLength * cos(this.S) \n          + this.beginningLength * cos(this.S), 2) \n        + pow((this.segmentLength + this.spaceLength) * (i + 1) \n          * sin(this.S) - this.spaceLength * sin(this.S) \n              + this.beginningLength * sin(this.S), 2))\n\n      if (distCheck &lt;= this.L) {\n        line(\n          this.x1 + (this.segmentLength + this.spaceLength) * i \n              * cos(this.S) + this.beginningLength * cos(this.S),\n          this.y1 + (this.segmentLength + this.spaceLength) * i \n              * sin(this.S) + this.beginningLength * sin(this.S),\n          this.x1 + (this.segmentLength + this.spaceLength) * (i + 1) \n              * cos(this.S) - this.spaceLength * cos(this.S)\n              + this.beginningLength * cos(this.S),\n          this.y1 + (this.segmentLength + this.spaceLength) * (i + 1) \n              * sin(this.S) - this.spaceLength * sin(this.S) \n              + this.beginningLength * sin(this.S)\n        )\n      } else {\n\n        stroke(255,255,0)\n        var distCheck = \n            sqrt(\n              pow((this.segmentLength + this.spaceLength) * i \n                  * cos(this.S) + this.beginningLength * cos(this.S), 2) \n              + pow((this.segmentLength + this.spaceLength) * i \n                    * sin(this.S) + this.beginningLength * sin(this.S), 2))\n       \n        if (distCheck  &lt; this.L) {\n          line(\n            this.x1 + (this.segmentLength + this.spaceLength) * i \n                * cos(this.S) + this.beginningLength * cos(this.S),\n            this.y1 + (this.segmentLength + this.spaceLength) * i \n                * sin(this.S) + this.beginningLength * sin(this.S),\n            this.x2, this.y2\n          )\n        }\n      }\n    }\n  }\n}\n\nfunction setup() {\n  createCanvas(400, 400);\n\n  als = [];\n  for (i = 0; i &lt; 20; i++) {\n    als.push(new AnimatedLine(100, 100 + 10 * i, 300, 100 + 10 * i, random(1, 35), random(1, 35)));\n  }\n}\n\nfunction draw() {\n  background(220);\n\n  for (i = 0; i &lt; 20; i++) {\n    stroke(0)\n    strokeWeight(3);\n    als[i].display();\n    als[i].move(0.2)\n\n    strokeWeight(5);\n    stroke(255, 0, 0)\n    point(100, 100 + i * 10);\n    point(300, 100 + i * 10);\n  }\n}\n\n\nAs sanity check, it works fine with any kind of slanted lines as well:\n\n\nReverse speed\nOne final addendum would be reversing the movement to go in the other direction. Sometimes I surprise myself with the code I write, what we have was solid enough that a simple change was all we needed to handle the reverse movement. We simply add a function that handles negative rates passed to the move function. In this case the beginningLength begins from (segmentLength + spaceLength) and decreases gradually, and is reset when it becomes 0. The code looks like this:\n\nmove(rate) {\n    if(rate&lt;0){\n      this.moveReverse(rate);\n    }else{\n      this.beginningLength += rate\n      if (this.beginningLength &gt;= this.segmentLength + this.spaceLength) {\n        this.beginningLength = 0;\n      }\n    }\n  }\n\n  moveReverse(rate) {\n    this.beginningLength += rate\n    if (this.beginningLength &lt;= 0) {\n      this.beginningLength = this.segmentLength + this.spaceLength;\n    }\n  }\n\n\nAnd this should be a wrap. Now you can go ahead and use these dashed lines for your own sketches or build upon them! Happy creative coding!\n",
        "url": "/blog/Animated-Dashed-Lines-in-P5JS"
      },
    
      {
        "title": "Simulating brush strokes with Hooke's Law in P5JS",
        "excerpt": "\n\n",
        "content": "\n\nOne continuous big source of inspiration for me has been Processing’s Discover Tab, where you can browse sketches from different users and see what they have come up with.\nRecently one in particular caught my eye, that allows you to draw brush strokes in a style reminiscent of the far east. The behaviour of these brush strokes felt very fluid and responsive, so I dug little deeper and had a look at the code (you can view the code for every sketch on there!).\n\nThe sketch was made by Twitter user @BUN_information, and has even made a very nice tutorial for his code here.\n\nOpenProcessinghttps://t.co/pQxLY5e50HGitHubhttps://t.co/DZBU9LhTue「解説書くならせっかくだし」と思ってOpenProcessingのTutorial Modeを使ってみたけど…油断するとすーぐ文章長くなりがち。そして解説になってない。英語も正しいかどうか怪しい。いいよもう。ふーんだ。#Processing https://t.co/nRRqkppCIy pic.twitter.com/kmg5xdplHs&mdash; BUN (@BUN_information) November 15, 2019\n\n\nThis blog post’s purpose is to explain and adapt this code for p5js. BUN divides his tutorial into 6 parts, where each part introduces new behaviour and comlexity to the brush stroke. The first part is very simple, we simply draw circles at the cursor’s location and go from there:\n\nfunction setup() {\n  createCanvas(400, 400);\n}\n\n// brushSize simply is the thikness of the brush stroke\nlet brushSize = 20;\nfunction draw() {\n  if(mouseIsPressed) {\n    strokeWeight( 3 );\n    circle( mouseX, mouseY, size );\n  }\n}\n\n\n\n\nThe second step will actually improve the drawing behaviour significantly by implementing Hooke’s Law. Essentially, we’re not drawing the ellipses at the exact mouse coordinates anymore, but are applying a modifiers to the coordinates. It will almost feel like the drawn ellipses are dragged behind the mouse cursor, as if they were attached to a spring, and once you stop moving the cursor, it will actually overshoot and then snap back ellastically to a resting position. I’m not a physics whizz, but I will try my best at explaining the concept.\n\nPicture an imaginary spring, where one end is attached to the circle that we’re drawing, and the other end is connected to your cursor. This spring has an ellastic behaviour, when you begin dragging one end, meanwhile the other end, to which our circle is attached, will start dragging behind it. The faster you drag one end the more this spring will be stretched out and the harder the snap-back will be when you come to a rest. The trick here is to somehow simulate this behaviour, and it can be done with Hooke’s Law.\n\nHooke’s Law states that the force F by which a spring is displaced can be calculated with the following formula:\nF = k*x\nWhere x is the amount of displacement from the beginning of dragging the spring, and k is a parameter characteristic of the spring. We can actually choose this parameter, which simply signifies the elasticity of the spring. In BUN’s code, we first calculate the velocity of our cursor while it is moving (velocity being a vector quantity that defines the distance traveled over some period of time).\n\nThe amount of displacement is simply the distance between the moment we pressed the mouse to where we moved the mouse, and will be the x parameter in Hooke’s formula. For now well simply choose k to be 0.5 for a balanced behaviour (k should be between 0 and 1). One thing to note here, is that we need to calculate the formula for both x and y coordinates, since we’re moving on a 2D plane:\nvx += ( mouseX - x ) * spring;\nvy += ( mouseY - y ) * spring;\n\n\nNow, we would end up with a very erratic behaviour, where the spring seems to never come to a stop, and keeps oscillating around the cursor’s rest position:\n\n\nThis is because we ignored one variable that occurs in the physical world: friction. Friction, like the spring parameter, is a variable between 0 and 1, where values closer to 1 designated less friction and values closer to zero designate more friction. We simply multiply our velocity by this friction parameter. And we will obtain a nice behaviour. The code should look like this now:\nfunction setup() {\n  createCanvas(400, 400);\n}\n\n// brushSize simply is the thikness of the brush stroke\nlet brushSize = 20;\nlet f = 0.5;\nlet spring = 0.5;\nlet friction = 0.5;\nfunction draw() {\n  /*\n    Smoother movement than using mouse coordinates\n  */\n  /*\n    Parameters used\n      size : Brush size\n      spring : Spring constant(Larger value means stronger spring)\n      friction : Friction(Smaller value means, the more slippery)\n  */\n  \n  if(mouseIsPressed) {\n    \n    if(!f) {\n      // Initialize coordinates\n      f = true;\n      x = mouseX;\n      y = mouseY;\n    }\n    \n    // Calculate velocity\n    /* \n      MEMO : Use Hooke's law to make spring motion\n        DistanceX = (X1 - X0)\n        SpringConstant = (value between 0 and 1)\n        AccelerationX = DistanceX * SpringConstant\n        VelocityX = ( VelocityX + AccelerationX ) * Friction\n    */\n    vx += ( mouseX - x ) * spring;\n    vy += ( mouseY - y ) * spring;\n    vx *= friction;\n    vy *= friction;\n    \n    x += vx;\n    y += vy;\n    \n    // Draw at the calculated coordinates\n    strokeWeight( 3 );\n    circle( x, y, brushSize );  // AMEND: mouseX, mouseY -&gt; x, y\n    \n  } else if(f) {\n    // Reset state\n    vx = vy = 0;\n    f = false;\n  }\n}\n\n\nIt might not be very obvious from the gif, but it’s remarkable if you try it yourself.\n\n\nIn the third part of the tutorial, we begin making some changes to make the drawn circles look more like strokes, rather than just circles. Generally, in chinese, japanese and korean calligraphy, symbols can be drawn in different styles and different speeds, where the speed at which the calligraphy is made is a characteristic feature. When drawn slow, strokes tend to be thicker and heavier; when drawn faster, less pressure is put on the strokes and they tend to be thinner. This is what BUN tries to achieve in this part of the tutorial, drawn circles should be smaller (thinner), in the middle portion of the stroke, the start and end points of the stroke should be thicker, as more pressure is put on the brush.\n\nThis behaviour can be simulated by calculating the stroke thickness as a function of the velocity. Essentially, the faster we are drawing, the higher the velocity, the thinner is our stroke.\nv += sqrt( vx*vx + vy*vy ) - v;\nv *= 0.6;\n\nWe also need to ensure a minimum width of 1, so that the stroke doesn’t completely vanish.\n\n\nIn part 4, we actually make the stroke look much more like a stroke than just ellipses. It’s actually very impressive how stacking these simple rules allow us to simulate such complex behaviour. Here, instead of drawing separate circles, we’ll draw lines between the points where we would have drawn circles instead, this can be done by simply adding an intermediary variable that stores the previous circles coordinates.\n\n\nHowever you can see that the different line segments that make up the stroke can look a little discontinuous and jagged when drawn at higher speeds. Part 5 tries to ammend this by splitting up the line segments into multiple smaller chunks to smooth these portions.\nfor( let i = 0; i &lt; splitNum; ++i ) {  // ADD\n      oldX = x;\n      oldY = y;\n      x += vx/splitNum;  // AMEND: vx -&gt; vx/splitNum\n      y += vy/splitNum;  // AMEND: vy -&gt; vy/splitNum\n      oldR += (r-oldR)/splitNum;  \n      if(oldR &lt; 1) { oldR = 1; }  // AMEND: r -&gt; oldR\n      strokeWeight( oldR );  // AMEND: r -&gt; oldR\n      line( x, y, oldX, oldY );\n}\n\nWhere you can choose a value for the ‘splitNum’ parameter, that determines into how many subsegments you want to split your lines.\n\n\nWe could already stop here, but the last part will put a finishing touch on our brush strokes and make them look much more realistic. In part 6 we draw multiple lines offset from each by a tiny amount and make them have variable thickness:\n\n\nThe final code will look like this:\n\nfunction setup() {\n  createCanvas(1000, 1000);\n}\n\n// brushSize simply is the thikness of the brush stroke\nlet brushSize = 40;\nlet f = 0.5;\nlet spring = 0.4;\nlet friction = 0.45;\nlet v = 0.5;\nlet r = 0;\nlet vx = 0;\nlet vy = 0;\nlet splitNum = 100;\nlet diff = 8;\nfunction draw() {\n  if(mouseIsPressed) {\n    if(!f) {\n      f = true;\n      x = mouseX;\n      y = mouseY;\n    }\n    vx += ( mouseX - x ) * spring;\n    vy += ( mouseY - y ) * spring;\n    vx *= friction;\n    vy *= friction;\n    \n    v += sqrt( vx*vx + vy*vy ) - v;\n    v *= 0.6;\n    \n    oldR = r;\n    r = brushSize - v;\n    \n    for( let i = 0; i &lt; splitNum; ++i ) {\n      oldX = x;\n      oldY = y;\n      x += vx / splitNum;\n      y += vy / splitNum;\n      oldR += ( r - oldR ) / splitNum;\n      if(oldR &lt; 1) { oldR = 1; }\n      strokeWeight( oldR+diff );  // AMEND: oldR -&gt; oldR+diff\n      line( x, y, oldX, oldY );\n      strokeWeight( oldR );  // ADD\n      line( x+diff*1.5, y+diff*2, oldX+diff*2, oldY+diff*2 );  // ADD\n      line( x-diff, y-diff, oldX-diff, oldY-diff );  // ADD\n    }\n    \n  } else if(f) {\n    vx = vy = 0;\n    f = false;\n  }\n}\n\n\nAnd this is about it! Many thanks to BUN for sharing his code, and I recommend giving him a follow on OpenProcessing or on Twitter to keep up with his creations! There are actually many different algorithms for simulating brush strokes, which I might cover when I learn more about them! Cheers, if you enjoyed this post consider giving me a follow on Twitter and sharing this, until next time!\n",
        "url": "/blog/Simulating-brush-strokes-with-Hooke's-Law-in-P5JS-and-Processing"
      },
    
      {
        "title": "Introduction to Perlin Noise in P5JS and Processing",
        "excerpt": "\n\n",
        "content": "\n\nI’m super excited about this blog post, because it’s the start of a series of posts on Perlin Noise, which is a wonderful tool to have in your arsenal.\n\nWith perlin noise we can create smooth and interesting shapes that we wouldn’t otherwise be able to make. This series will focus on Perlin Noise, particularly in combination with the curveVertex() function, which we will make heavy use of. When starting out in creative coding, it might be difficult to move away from circular and rectangular shapes, as these seem to be the most natural things to code up.\n\nWhilst drawing freehand on a paper, it’s only natural to utilize smooth curves instead of hard edges and perfect circles. Perlin noise allows us to explore this venue through code. In p5js we can invoke perlin noise through the noise() function, which works fundamentally different than the random() function. We’ll discuss the  difference between them in a bit. There already are great resources that explain Perlin Noise in great detail, such as this writeup by Gene Kogan (I also recommend checking out his website. Especially if you want to get into AI art). As well as Daniel Schiffman aka the Coding Train’s introductory video on Perlin Noise.\n\nThe special thing that will, hopefully, set this tutorial apart from already existing tutorials, is that it will exemplify how to use Perlin Noise in a number of specific scenarios. Where we’ll start gentle and then iteratively increase the difficulty.\n\nP5's noise() function\nThe noise() function is actually a little tricky to figure out by just messing around with it, since you can use it in a number of different ways. The random() function in P5JS accepts a specific range and returns a random number within this range. The noise() function however can accept 1, 2 or 3 numbers as input arguments.\n\nLet’s begin with a simple example, similar to the example shown in the Coding Train’s video, where we modulate the position of a circle with the output of the noise() function:\nfunction setup() {\n  createCanvas(400, 400);\n}\n\nfunction draw() {\n  background(220);\n  var n = noise(millis()/1000)\n  n = map(n, 0, 1, -100,100)\n  ellipse(width/2 + n, height/2, 20)\n}\n\n\nThings to consider here:\n\n  The input value to the noise function is not a range between two numbers but rather a linearly increasing parameter, such as millis(), frameCount or simply a counter that you update each drawloop\n  the returned value from the noise() function is always in the range of 0 and 1, that means that we have to scale it accordingly to invoke an observable movement to the ellipse we’re drawing\n  To do this scaling we can use the map() function, which simply remaps from one range to another. Here the initial range was between 0 and 1, and we would like it to be between -100 and 100 to make the ellipse move from side to side.\n\n\nThis is a very basic example of what you can do with Perlin Noise, next we’ll look at something more interesting.\n\n2D Perlin Noise\nAs said, the noise() function accepts 1, 2 or 3 input parameters. The example above illustrated 1 dimensional perlin noise behaviour when modulated with time. Next well have a look at 2 dimensional perlin noise, and see how the noise() function reacts to different input parameters. In the following example we’ll draw a relatively fine grid of rectangles to the canvas, where each rectangle is colored based on a value returned by the noise function. The input to the noise function will simply be the coordinates of the rectangle on the canvas (we could also do this on a pixel level but then things would be very slow). The code looks as follows:\n\nfunction setup() {\n  createCanvas(200, 200);\n}\n\nfunction draw() {\n  background(220);\n  noStroke();\n  for(i = 0; i &lt; height; i+=3){\n    for(j = 0; j &lt; width; j+=3){\n      var n = noise(i,j)\n      fill(n*255)\n      rect(i,j,3)\n    }\n  }\n  noLoop()\n}\n\nNow we obtain something that doesn’t look very good, or anything like Perlin noise:\n\nThat’s because we missed an important detail, the steps between our coordinates are too large and we need to scale them down to get a finer result. The official reference states:\n\n\nAnother way to adjust the character of the resulting sequence is the scale of the input coordinates. As the function works within an infinite space the value of the coordinates doesn't matter as such, only the distance between successive coordinates does (eg. when using noise() within a loop). As a general rule the smaller the difference between coordinates, the smoother the resulting noise sequence will be. Steps of 0.005-0.03 work best for most applications, but this will differ depending on use.\n\n\nHence we can simply multiply or divide the input coordinates by a number:\nvar n = noise(i*0.005,j*0.005)\n\nAnd we should obtain a canvas that looks like it has a cloudy/milky texture to it, which is the desired effect and what 2D perlin noise looks like:\n\n\n\n\t\n\n\n\n\n\n\nDepending on your use case you might want to use a different scale, 0.05 also looks good in this case (image on the right). But remember that it also depends on the stride at which we’re drawing our rectangles to the canvas.\n\nAnother cool thing about this is that 2D Perlin Noise is an infinite space, such that if we were to increment the input coordinates at each time step, we can obtain an infinitly scrolling effect:\n//in the draw loop\nfor(i = 0; i &lt; height; i+=3){\n    for(j = 0; j &lt; width; j+=3){\n      var n = noise(i*0.005 + t,j*0.005+t)\n      fill(n*255)\n      rect(i,j,3)\n    }\n  }\nt+=0.05\n\n\n\n\tIncrementing the x and y coordinates every draw loop, allows us to shift the noise landscape. This makes it seem as if we were flying above a landscape:\n\n    \n\nvar n = noise(i*0.005+t,j*0.005)\n\nvar n = noise(i*0.005,j*0.005+t)\n\n\n\n\n\nIf we were to multiply or divide it we would obtain a zoom out / zoom in effect respectively. For zooming out and zooming in respectively:\n\n\nvar n = noise(i*0.005*t,j*0.005*t)\n\n\n\n\nvar n = noise(i*0.005/t,j*0.005/t)\n\n\n\n\nNaturally, you can get more creative by plugging in different functions into the noise() function.\n\n3D Perlin Noise\nThe little tricks we did above are neat, but what if we want to modulate the noise texture itself with time? That’s where the 3rd parameter comes into play, here we keep the position of the perlin space the same, but modulate the color of each square via the 3rd parameter, in this sense the 3rd parameter is the z axis and is manifests itself as a change of color of each rectangle. This allows us to obtain a wobbly texture that seems to wobble back and forth:\n\nfunction setup() {\n  createCanvas(200, 200);\n}\nlet t = 0\nlet rez = 0.05\nfunction draw() {\n  background(220);\n  noStroke();\n  for(i = 0; i &lt; height; i+=3){\n    for(j = 0; j &lt; width; j+=3){\n      var n = noise(i*rez,j*rez, t)\n      fill(n*255)\n      rect(i,j,3)\n    }\n    t += 0.0003\n  }\n}\n\n\n\nWe can also leverage this to obtain some color in our sketch, we simply create three different noise variables and plug their result into the respective r, g and b inputs of the fill() method:\nlet t = 0\nlet rez = 0.05\nfunction draw() {\n  background(220);\n  noStroke();\n  for(i = 0; i &lt; height; i+=3){\n    for(j = 0; j &lt; width; j+=3){\n      var n = noise(i*rez,j*rez, t)\n      var n1 = noise(j*rez, t, i*rez)\n      var n2 = noise(t,j*rez,i*rez)\n      fill(n*255, n1*255, n2*255)\n      rect(i,j,3)\n    }\n    t += 0.0003\n  }\n}\n\n\n\nAnd to wrap up, you could also get creative with a chromatic wash like this:\nvar n1 = noise(i*rez,j*rez, t)\nvar n2 = noise(i*rez-t,j*rez, t)\nvar n3 = noise(i*rez+t,j*rez, t)\n\n\n\n\nAnd that’s about it, in the next tutorial we’ll have a look at making smooth curves with perlin noise and the curveVertex() function.\n",
        "url": "/blog/Introduction-to-Perlin-Noise-in-P5JS-and-Processing"
      },
    
  
  
  
]

